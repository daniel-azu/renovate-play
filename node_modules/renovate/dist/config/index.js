"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterConfig = exports.getManagerConfig = exports.mergeChildConfig = void 0;
const logger_1 = require("../logger");
const manager_1 = require("../manager");
const options = __importStar(require("./options"));
const utils_1 = require("./utils");
Object.defineProperty(exports, "mergeChildConfig", { enumerable: true, get: function () { return utils_1.mergeChildConfig; } });
function getManagerConfig(config, manager) {
    let managerConfig = {
        ...config,
        language: null,
        manager: null,
    };
    const language = (0, manager_1.get)(manager, 'language');
    if (language) {
        managerConfig = (0, utils_1.mergeChildConfig)(managerConfig, config[language]);
    }
    managerConfig = (0, utils_1.mergeChildConfig)(managerConfig, config[manager]);
    for (const i of (0, manager_1.getLanguageList)().concat((0, manager_1.getManagerList)())) {
        delete managerConfig[i];
    }
    managerConfig.language = language;
    managerConfig.manager = manager;
    return managerConfig;
}
exports.getManagerConfig = getManagerConfig;
function filterConfig(inputConfig, targetStage) {
    logger_1.logger.trace({ config: inputConfig }, `filterConfig('${targetStage}')`);
    const outputConfig = { ...inputConfig };
    const stages = ['global', 'repository', 'package', 'branch', 'pr'];
    const targetIndex = stages.indexOf(targetStage);
    for (const option of options.getOptions()) {
        const optionIndex = stages.indexOf(option.stage);
        if (optionIndex !== -1 && optionIndex < targetIndex) {
            delete outputConfig[option.name];
        }
    }
    return outputConfig;
}
exports.filterConfig = filterConfig;
//# sourceMappingURL=index.js.map