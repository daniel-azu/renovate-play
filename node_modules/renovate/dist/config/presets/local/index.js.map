{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/local/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,4DAOsC;AACtC,gDAAkC;AAClC,wDAA0C;AAC1C,qEAAuD;AACvD,gDAAkC;AAClC,kDAAoC;AACpC,kDAAoC;AAGpC,MAAM,SAAS,GAAG;IAChB,CAAC,+BAAmB,CAAC,EAAE,KAAK;IAC5B,CAAC,mCAAuB,CAAC,EAAE,SAAS;IACpC,CAAC,0CAA8B,CAAC,EAAE,eAAe;IACjD,CAAC,+BAAmB,CAAC,EAAE,KAAK;IAC5B,CAAC,gCAAoB,CAAC,EAAE,MAAM;IAC9B,CAAC,gCAAoB,CAAC,EAAE,MAAM;CAC/B,CAAC;AAEF,SAAgB,SAAS,CAAC,EACxB,WAAW,EAAE,OAAO,EACpB,UAAU,GAAG,SAAS,EACtB,UAAU,EACV,UAAU,GACG;IACb,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAC;IAC1C,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;KAC9D;IACD,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;IACnD,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CACb,yBAAyB,UAAU,CAAC,QAAQ,qBAAqB,CAClE,CAAC;KACH;IACD,OAAO,QAAQ,CAAC,qBAAqB,CACnC,OAAO,EACP,UAAU,EACV,UAAU,EACV,QAAQ,CACT,CAAC;AACJ,CAAC;AAtBD,8BAsBC","sourcesContent":["import {\n  PLATFORM_TYPE_AZURE,\n  PLATFORM_TYPE_BITBUCKET,\n  PLATFORM_TYPE_BITBUCKET_SERVER,\n  PLATFORM_TYPE_GITEA,\n  PLATFORM_TYPE_GITHUB,\n  PLATFORM_TYPE_GITLAB,\n} from '../../../constants/platforms';\nimport * as azure from '../azure';\nimport * as bitbucket from '../bitbucket';\nimport * as bitbucketServer from '../bitbucket-server';\nimport * as gitea from '../gitea';\nimport * as github from '../github';\nimport * as gitlab from '../gitlab';\nimport type { Preset, PresetConfig } from '../types';\n\nconst resolvers = {\n  [PLATFORM_TYPE_AZURE]: azure,\n  [PLATFORM_TYPE_BITBUCKET]: bitbucket,\n  [PLATFORM_TYPE_BITBUCKET_SERVER]: bitbucketServer,\n  [PLATFORM_TYPE_GITEA]: gitea,\n  [PLATFORM_TYPE_GITHUB]: github,\n  [PLATFORM_TYPE_GITLAB]: gitlab,\n};\n\nexport function getPreset({\n  packageName: pkgName,\n  presetName = 'default',\n  presetPath,\n  baseConfig,\n}: PresetConfig): Promise<Preset> {\n  const { platform, endpoint } = baseConfig;\n  if (!platform) {\n    throw new Error(`Missing platform config for local preset.`);\n  }\n  const resolver = resolvers[platform.toLowerCase()];\n  if (!resolver) {\n    throw new Error(\n      `Unsupported platform '${baseConfig.platform}' for local preset.`\n    );\n  }\n  return resolver.getPresetFromEndpoint(\n    pkgName,\n    presetName,\n    presetPath,\n    endpoint\n  );\n}\n"]}