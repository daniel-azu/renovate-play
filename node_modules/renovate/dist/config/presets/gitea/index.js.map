{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/config/presets/gitea/index.ts"],"names":[],"mappings":";;;AAAA,4CAAyC;AACzC,uEAG8C;AAC9C,mFAA8E;AAE9E,kCAIiB;AAEJ,QAAA,QAAQ,GAAG,2BAA2B,CAAC;AAE7C,KAAK,UAAU,aAAa,CACjC,IAAY,EACZ,QAAgB,EAChB,QAAgB;IAEhB,IAAI,GAAiB,CAAC;IACtB,IAAI;QACF,GAAG,GAAG,MAAM,IAAA,8BAAe,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;KAC1E;IAAC,OAAO,GAAG,EAAE;QACZ,6CAA6C;QAC7C,IAAI,GAAG,YAAY,uCAAiB,EAAE;YACpC,MAAM,GAAG,CAAC;SACX;QACD,eAAM,CAAC,KAAK,CACV,EAAE,UAAU,EAAE,GAAG,CAAC,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,EAC9C,sBAAsB,QAAQ,YAAY,CAC3C,CAAC;QACF,MAAM,IAAI,KAAK,CAAC,2BAAoB,CAAC,CAAC;KACvC;IACD,IAAI;QACF,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC9D,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnC,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,0BAAmB,CAAC,CAAC;KACtC;AACH,CAAC;AA1BD,sCA0BC;AAED,SAAgB,qBAAqB,CACnC,OAAe,EACf,UAAkB,EAClB,UAAkB,EAClB,QAAQ,GAAG,gBAAQ;IAEnB,OAAO,IAAA,kBAAW,EAAC;QACjB,OAAO;QACP,UAAU;QACV,UAAU;QACV,QAAQ;QACR,KAAK,EAAE,aAAa;KACrB,CAAC,CAAC;AACL,CAAC;AAbD,sDAaC;AAED,SAAgB,SAAS,CAAC,EACxB,WAAW,EAAE,OAAO,EACpB,UAAU,GAAG,SAAS,EACtB,UAAU,GACG;IACb,OAAO,qBAAqB,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,gBAAQ,CAAC,CAAC;AAC1E,CAAC;AAND,8BAMC","sourcesContent":["import { logger } from '../../../logger';\nimport {\n  RepoContents,\n  getRepoContents,\n} from '../../../platform/gitea/gitea-helper';\nimport { ExternalHostError } from '../../../types/errors/external-host-error';\nimport type { Preset, PresetConfig } from '../types';\nimport {\n  PRESET_DEP_NOT_FOUND,\n  PRESET_INVALID_JSON,\n  fetchPreset,\n} from '../util';\n\nexport const Endpoint = 'https://gitea.com/api/v1/';\n\nexport async function fetchJSONFile(\n  repo: string,\n  fileName: string,\n  endpoint: string\n): Promise<Preset> {\n  let res: RepoContents;\n  try {\n    res = await getRepoContents(repo, fileName, null, { baseUrl: endpoint });\n  } catch (err) {\n    // istanbul ignore if: not testable with nock\n    if (err instanceof ExternalHostError) {\n      throw err;\n    }\n    logger.debug(\n      { statusCode: err.statusCode, repo, fileName },\n      `Failed to retrieve ${fileName} from repo`\n    );\n    throw new Error(PRESET_DEP_NOT_FOUND);\n  }\n  try {\n    const content = Buffer.from(res.content, 'base64').toString();\n    const parsed = JSON.parse(content);\n    return parsed;\n  } catch (err) {\n    throw new Error(PRESET_INVALID_JSON);\n  }\n}\n\nexport function getPresetFromEndpoint(\n  pkgName: string,\n  filePreset: string,\n  presetPath: string,\n  endpoint = Endpoint\n): Promise<Preset> {\n  return fetchPreset({\n    pkgName,\n    filePreset,\n    presetPath,\n    endpoint,\n    fetch: fetchJSONFile,\n  });\n}\n\nexport function getPreset({\n  packageName: pkgName,\n  presetName = 'default',\n  presetPath,\n}: PresetConfig): Promise<Preset> {\n  return getPresetFromEndpoint(pkgName, presetName, presetPath, Endpoint);\n}\n"]}