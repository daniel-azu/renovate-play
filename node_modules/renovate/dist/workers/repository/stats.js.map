{"version":3,"file":"stats.js","sourceRoot":"","sources":["../../../lib/workers/repository/stats.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAsB;AACtB,yCAAsC;AACtC,kEAAoD;AAGpD,SAAgB,iBAAiB;IAC/B,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAiB,eAAe,CAAC,CAAC;IACnE,uBAAuB;IACvB,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO;KACR;IACD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QACzB,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,EAAE;YACnB,OAAO,CAAC,CAAC;SACV;QACD,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;YACjB,OAAO,CAAC,CAAC,CAAC;SACX;QACD,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;IACH,MAAM,WAAW,GAAa,EAAE,CAAC;IACjC,MAAM,YAAY,GAAmC,EAAE,CAAC;IACxD,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;QACtC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,WAAW,CAAC;QAC7D,WAAW,CAAC,IAAI,CACd,GAAG,MAAM,CAAC,WAAW,EAAE,IAAI,GAAG,IAAI,QAAQ,IAAI,aAAa,EAAE,CAC9D,CAAC;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,aAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpC,YAAY,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtD,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC1C;IACD,eAAM,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,EAAE,YAAY,CAAC,CAAC;IAM1D,MAAM,SAAS,GAA8B,EAAE,CAAC;IAChD,IAAI,aAAa,GAAG,CAAC,CAAC;IACtB,KAAK,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QAC/D,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC;QACrC,aAAa,IAAI,YAAY,CAAC;QAC9B,MAAM,UAAU,GAAG,QAAQ;aACxB,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC;aAC/B,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC;QAE3D,MAAM,QAAQ,GAAG,QAAQ;aACtB,GAAG,CAAC,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,aAAa,CAAC;aACzC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,YAAY,CAAC,CAAC;QACvD,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC;KAClE;IACD,eAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,aAAa,EAAE,EAAE,iBAAiB,CAAC,CAAC;AAChE,CAAC;AAjDD,8CAiDC","sourcesContent":["import URL from 'url';\nimport { logger } from '../../logger';\nimport * as memCache from '../../util/cache/memory';\nimport type { RequestStats } from '../../util/http/types';\n\nexport function printRequestStats(): void {\n  const httpRequests = memCache.get<RequestStats[]>('http-requests');\n  // istanbul ignore next\n  if (!httpRequests) {\n    return;\n  }\n  httpRequests.sort((a, b) => {\n    if (a.url === b.url) {\n      return 0;\n    }\n    if (a.url < b.url) {\n      return -1;\n    }\n    return 1;\n  });\n  const allRequests: string[] = [];\n  const requestHosts: Record<string, RequestStats[]> = {};\n  for (const httpRequest of httpRequests) {\n    const { method, url, duration, queueDuration } = httpRequest;\n    allRequests.push(\n      `${method.toUpperCase()} ${url} ${duration} ${queueDuration}`\n    );\n    const { hostname } = URL.parse(url);\n    requestHosts[hostname] = requestHosts[hostname] || [];\n    requestHosts[hostname].push(httpRequest);\n  }\n  logger.trace({ allRequests, requestHosts }, 'full stats');\n  type HostStats = {\n    requestCount: number;\n    requestAvgMs: number;\n    queueAvgMs: number;\n  };\n  const hostStats: Record<string, HostStats> = {};\n  let totalRequests = 0;\n  for (const [hostname, requests] of Object.entries(requestHosts)) {\n    const requestCount = requests.length;\n    totalRequests += requestCount;\n    const requestSum = requests\n      .map(({ duration }) => duration)\n      .reduce((a, b) => a + b, 0);\n    const requestAvgMs = Math.round(requestSum / requestCount);\n\n    const queueSum = requests\n      .map(({ queueDuration }) => queueDuration)\n      .reduce((a, b) => a + b, 0);\n    const queueAvgMs = Math.round(queueSum / requestCount);\n    hostStats[hostname] = { requestCount, requestAvgMs, queueAvgMs };\n  }\n  logger.debug({ hostStats, totalRequests }, 'http statistics');\n}\n"]}