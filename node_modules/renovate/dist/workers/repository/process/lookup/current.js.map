{"version":3,"file":"current.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/current.ts"],"names":[],"mappings":";;;;;;AAAA,0DAAkC;AAClC,+CAA4C;AAI5C,SAAgB,iBAAiB,CAC/B,MAA0B,EAC1B,UAAyB,EACzB,aAAqB,EACrB,aAAqB,EACrB,WAAqB;IAErB,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,MAAM,CAAC;IAC/C,qBAAqB;IACrB,IAAI,CAAC,YAAE,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;QAC5B,OAAO,IAAI,CAAC;KACb;IACD,IAAI,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE;QACtC,OAAO,YAAY,CAAC;KACrB;IACD,IAAI,UAAU,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE;QAC5C,OAAO,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;KAC9C;IACD,eAAM,CAAC,KAAK,CAAC,gBAAgB,YAAY,WAAW,CAAC,CAAC;IACtD,IAAI,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CACzC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,YAAY,CAAC,CACpC,CAAC;IACF,IAAI,aAAa,IAAI,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE;QACpE,WAAW,GAAG,WAAW,CAAC,MAAM,CAC9B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,EAAE,aAAa,CAAC,CACnD,CAAC;KACH;IACD,IAAI,aAAa,KAAK,KAAK,EAAE;QAC3B,OAAO,CACL,aAAa;YACb,UAAU,CAAC,oBAAoB,CAAC,WAAW,EAAE,YAAY,CAAC,CAC3D,CAAC;KACH;IACD,IAAI,aAAa,KAAK,MAAM,EAAE;QAC5B,8CAA8C;QAC9C,OAAO,UAAU,CAAC,oBAAoB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;KACnE;IACD,+CAA+C;IAC/C,OAAO,UAAU,CAAC,oBAAoB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;AACpE,CAAC;AAvCD,8CAuCC","sourcesContent":["import is from '@sindresorhus/is';\nimport { logger } from '../../../../logger';\nimport type { VersioningApi } from '../../../../versioning/types';\nimport type { LookupUpdateConfig } from './types';\n\nexport function getCurrentVersion(\n  config: LookupUpdateConfig,\n  versioning: VersioningApi,\n  rangeStrategy: string,\n  latestVersion: string,\n  allVersions: string[]\n): string | null {\n  const { currentValue, lockedVersion } = config;\n  // istanbul ignore if\n  if (!is.string(currentValue)) {\n    return null;\n  }\n  if (versioning.isVersion(currentValue)) {\n    return currentValue;\n  }\n  if (versioning.isSingleVersion(currentValue)) {\n    return currentValue.replace(/=/g, '').trim();\n  }\n  logger.trace(`currentValue ${currentValue} is range`);\n  let useVersions = allVersions.filter((v) =>\n    versioning.matches(v, currentValue)\n  );\n  if (latestVersion && versioning.matches(latestVersion, currentValue)) {\n    useVersions = useVersions.filter(\n      (v) => !versioning.isGreaterThan(v, latestVersion)\n    );\n  }\n  if (rangeStrategy === 'pin') {\n    return (\n      lockedVersion ||\n      versioning.getSatisfyingVersion(useVersions, currentValue)\n    );\n  }\n  if (rangeStrategy === 'bump') {\n    // Use the lowest version in the current range\n    return versioning.minSatisfyingVersion(useVersions, currentValue);\n  }\n  // Use the highest version in the current range\n  return versioning.getSatisfyingVersion(useVersions, currentValue);\n}\n"]}