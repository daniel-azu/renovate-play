{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../lib/workers/repository/process/lookup/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { mergeChildConfig } from '../../../../config';\nimport type { ValidationMessage } from '../../../../config/types';\nimport {\n  Release,\n  getDatasourceList,\n  getDefaultVersioning,\n  getDigest,\n  getPkgReleases,\n  isGetPkgReleasesConfig,\n  supportsDigests,\n} from '../../../../datasource';\nimport { logger } from '../../../../logger';\nimport { getRangeStrategy } from '../../../../manager';\nimport { SkipReason } from '../../../../types';\nimport { clone } from '../../../../util/clone';\nimport { applyPackageRules } from '../../../../util/package-rules';\nimport * as allVersioning from '../../../../versioning';\nimport { getBucket } from './bucket';\nimport { getCurrentVersion } from './current';\nimport { filterVersions } from './filter';\nimport { filterInternalChecks } from './filter-checks';\nimport { generateUpdate } from './generate';\nimport { getRollbackUpdate } from './rollback';\nimport type { LookupUpdateConfig, UpdateResult } from './types';\n\nexport async function lookupUpdates(\n  inconfig: LookupUpdateConfig\n): Promise<UpdateResult> {\n  let config: LookupUpdateConfig = { ...inconfig };\n  const {\n    currentDigest,\n    currentValue,\n    datasource,\n    depName,\n    digestOneAndOnly,\n    followTag,\n    lockedVersion,\n    packageFile,\n    pinDigests,\n    rollbackPrs,\n    isVulnerabilityAlert,\n    updatePinnedDependencies,\n  } = config;\n  logger.trace({ dependency: depName, currentValue }, 'lookupUpdates');\n  // Use the datasource's default versioning if none is configured\n  config.versioning ??= getDefaultVersioning(datasource);\n  const versioning = allVersioning.get(config.versioning);\n  const res: UpdateResult = {\n    updates: [],\n    warnings: [],\n    versioning: config.versioning,\n  } as any;\n  // istanbul ignore if\n  if (\n    !isGetPkgReleasesConfig(config) ||\n    !getDatasourceList().includes(datasource)\n  ) {\n    res.skipReason = SkipReason.InvalidConfig;\n    return res;\n  }\n  const isValid = currentValue && versioning.isValid(currentValue);\n  if (isValid) {\n    if (!updatePinnedDependencies && versioning.isSingleVersion(currentValue)) {\n      res.skipReason = SkipReason.IsPinned;\n      return res;\n    }\n\n    const dependency = clone(await getPkgReleases(config));\n    if (!dependency) {\n      // If dependency lookup fails then warn and return\n      const warning: ValidationMessage = {\n        topic: depName,\n        message: `Failed to look up dependency ${depName}`,\n      };\n      logger.debug({ dependency: depName, packageFile }, warning.message);\n      // TODO: return warnings in own field\n      res.warnings.push(warning);\n      return res;\n    }\n    if (dependency.deprecationMessage) {\n      logger.debug({ dependency: depName }, 'Found deprecationMessage');\n      res.deprecationMessage = dependency.deprecationMessage;\n    }\n    res.sourceUrl = dependency?.sourceUrl;\n    if (dependency.sourceDirectory) {\n      res.sourceDirectory = dependency.sourceDirectory;\n    }\n    res.homepage = dependency.homepage;\n    res.changelogUrl = dependency.changelogUrl;\n    res.dependencyUrl = dependency?.dependencyUrl;\n\n    const latestVersion = dependency.tags?.latest;\n    // Filter out any results from datasource that don't comply with our versioning\n    let allVersions = dependency.releases.filter((release) =>\n      versioning.isVersion(release.version)\n    );\n    // istanbul ignore if\n    if (allVersions.length === 0) {\n      const message = `Found no results from datasource that look like a version`;\n      logger.debug({ dependency: depName, result: dependency }, message);\n      if (!currentDigest) {\n        return res;\n      }\n    }\n    // Reapply package rules in case we missed something from sourceUrl\n    config = applyPackageRules({ ...config, sourceUrl: res.sourceUrl });\n    if (followTag) {\n      const taggedVersion = dependency.tags[followTag];\n      if (!taggedVersion) {\n        res.warnings.push({\n          topic: depName,\n          message: `Can't find version with tag ${followTag} for ${depName}`,\n        });\n        return res;\n      }\n      allVersions = allVersions.filter(\n        (v) =>\n          v.version === taggedVersion ||\n          (v.version === currentValue &&\n            versioning.isGreaterThan(taggedVersion, currentValue))\n      );\n    }\n    // Check that existing constraint can be satisfied\n    const allSatisfyingVersions = allVersions.filter((v) =>\n      versioning.matches(v.version, currentValue)\n    );\n    if (rollbackPrs && !allSatisfyingVersions.length) {\n      const rollback = getRollbackUpdate(config, allVersions, versioning);\n      // istanbul ignore if\n      if (!rollback) {\n        res.warnings.push({\n          topic: depName,\n          message: `Can't find version matching ${currentValue} for ${depName}`,\n        });\n        return res;\n      }\n      res.updates.push(rollback);\n    }\n    let rangeStrategy = getRangeStrategy(config);\n    // istanbul ignore next\n    if (\n      isVulnerabilityAlert &&\n      rangeStrategy === 'update-lockfile' &&\n      !lockedVersion\n    ) {\n      rangeStrategy = 'bump';\n    }\n    const nonDeprecatedVersions = dependency.releases\n      .filter((release) => !release.isDeprecated)\n      .map((release) => release.version);\n    const currentVersion =\n      getCurrentVersion(\n        config,\n        versioning,\n        rangeStrategy,\n        latestVersion,\n        nonDeprecatedVersions\n      ) ||\n      getCurrentVersion(\n        config,\n        versioning,\n        rangeStrategy,\n        latestVersion,\n        allVersions.map((v) => v.version)\n      );\n    // istanbul ignore if\n    if (!currentVersion && lockedVersion) {\n      return res;\n    }\n    res.currentVersion = currentVersion;\n    if (\n      currentVersion &&\n      rangeStrategy === 'pin' &&\n      !versioning.isSingleVersion(currentValue)\n    ) {\n      res.updates.push({\n        updateType: 'pin',\n        isPin: true,\n        newValue: versioning.getNewValue({\n          currentValue,\n          rangeStrategy,\n          currentVersion,\n          newVersion: currentVersion,\n        }),\n        newMajor: versioning.getMajor(currentVersion),\n      });\n    }\n    let filterStart = currentVersion;\n    if (lockedVersion && rangeStrategy === 'update-lockfile') {\n      // Look for versions greater than the current locked version that still satisfy the package.json range\n      filterStart = lockedVersion;\n    }\n    // Filter latest, unstable, etc\n    let filteredReleases = filterVersions(\n      config,\n      filterStart,\n      latestVersion,\n      allVersions,\n      versioning\n    ).filter((v) =>\n      // Leave only compatible versions\n      versioning.isCompatible(v.version, currentValue)\n    );\n    if (isVulnerabilityAlert) {\n      filteredReleases = filteredReleases.slice(0, 1);\n    }\n    const buckets: Record<string, [Release]> = {};\n    for (const release of filteredReleases) {\n      const bucket = getBucket(\n        config,\n        currentVersion,\n        release.version,\n        versioning\n      );\n      if (buckets[bucket]) {\n        buckets[bucket].push(release);\n      } else {\n        buckets[bucket] = [release];\n      }\n    }\n    const depResultConfig = mergeChildConfig(config, res);\n    for (const [bucket, releases] of Object.entries(buckets)) {\n      const sortedReleases = releases.sort((r1, r2) =>\n        versioning.sortVersions(r1.version, r2.version)\n      );\n      const { release, pendingChecks, pendingReleases } =\n        await filterInternalChecks(\n          depResultConfig,\n          versioning,\n          bucket,\n          sortedReleases\n        );\n      // istanbul ignore next\n      if (!release) {\n        return res;\n      }\n      const newVersion = release.version;\n      const update = generateUpdate(\n        config,\n        versioning,\n        rangeStrategy,\n        lockedVersion || currentVersion,\n        bucket,\n        release\n      );\n      if (pendingChecks) {\n        update.pendingChecks = pendingChecks;\n      }\n      if (pendingReleases.length) {\n        update.pendingVersions = pendingReleases.map((r) => r.version);\n      }\n      if (!update.newValue || update.newValue === currentValue) {\n        if (!lockedVersion) {\n          continue; // eslint-disable-line no-continue\n        }\n        // istanbul ignore if\n        if (rangeStrategy === 'bump') {\n          logger.trace(\n            { depName, currentValue, lockedVersion, newVersion },\n            'Skipping bump because newValue is the same'\n          );\n          continue; // eslint-disable-line no-continue\n        }\n        res.isSingleVersion = true;\n      }\n      res.isSingleVersion =\n        res.isSingleVersion || !!versioning.isSingleVersion(update.newValue);\n\n      res.updates.push(update);\n    }\n  } else if (currentValue) {\n    logger.debug(`Dependency ${depName} has unsupported value ${currentValue}`);\n    if (!pinDigests && !currentDigest) {\n      res.skipReason = SkipReason.InvalidValue;\n    } else {\n      delete res.skipReason;\n    }\n  } else {\n    res.skipReason = SkipReason.InvalidValue;\n  }\n\n  // Record if the dep is fixed to a version\n  if (lockedVersion) {\n    res.currentVersion = lockedVersion;\n    res.fixedVersion = lockedVersion;\n  } else if (currentValue && versioning.isSingleVersion(currentValue)) {\n    res.fixedVersion = currentValue.replace(/^=+/, '');\n  }\n  // Add digests if necessary\n  if (supportsDigests(config)) {\n    if (currentDigest) {\n      if (!digestOneAndOnly || !res.updates.length) {\n        // digest update\n        res.updates.push({\n          updateType: 'digest',\n          newValue: currentValue,\n        });\n      }\n    } else if (pinDigests) {\n      // Create a pin only if one doesn't already exists\n      if (!res.updates.some((update) => update.updateType === 'pin')) {\n        // pin digest\n        res.updates.push({\n          updateType: 'pin',\n          newValue: currentValue,\n        });\n      }\n    }\n    if (versioning.valueToVersion) {\n      res.currentVersion = versioning.valueToVersion(res.currentVersion);\n      for (const update of res.updates || []) {\n        update.newVersion = versioning.valueToVersion(update.newVersion);\n      }\n    }\n    // update digest for all\n    for (const update of res.updates) {\n      if (pinDigests || currentDigest) {\n        update.newDigest =\n          update.newDigest || (await getDigest(config, update.newValue));\n      }\n    }\n  }\n  if (res.updates.length) {\n    delete res.skipReason;\n  }\n  // Strip out any non-changed ones\n  res.updates = res.updates\n    .filter((update) => update.newDigest !== null)\n    .filter(\n      (update) =>\n        update.newValue !== currentValue ||\n        update.isLockfileUpdate ||\n        (update.newDigest && !update.newDigest.startsWith(currentDigest))\n    );\n  return res;\n}\n"]}