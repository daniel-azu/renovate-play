{"version":3,"file":"automerge.js","sourceRoot":"","sources":["../../../lib/workers/branch/automerge.ts"],"names":[],"mappings":";;;AAAA,gDAAsD;AAEtD,yCAAsC;AACtC,6CAA0C;AAC1C,uCAA2C;AAC3C,wCAA6C;AAWtC,KAAK,UAAU,kBAAkB,CACtC,MAAsB;;IAEtB,eAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;IACpD,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,aAAa,KAAK,QAAQ,CAAC,EAAE;QAC5D,OAAO,cAAc,CAAC;KACvB;IACD,MAAM,UAAU,GAAG,MAAM,mBAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACjE,IAAI,UAAU,EAAE;QACd,OAAO,+BAA+B,CAAC;KACxC;IACD,MAAM,YAAY,GAAG,MAAM,mBAAQ,CAAC,eAAe,CACjD,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,oBAAoB,CAC5B,CAAC;IACF,IAAI,YAAY,KAAK,oBAAY,CAAC,KAAK,EAAE;QACvC,eAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACnC,IAAI;YACF,IAAI,IAAA,wBAAe,GAAE,CAAC,MAAM,EAAE;gBAC5B,eAAM,CAAC,IAAI,CAAC,iCAAiC,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;aACpE;iBAAM;gBACL,MAAM,IAAA,iBAAW,EAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aACtC;YACD,eAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,EAAE,mBAAmB,CAAC,CAAC;YAChE,OAAO,YAAY,CAAC,CAAC,0BAA0B;SAChD;QAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;YACvC,IAAI,GAAG,CAAC,OAAO,KAAK,WAAW,EAAE;gBAC/B,eAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;gBAClD,OAAO,WAAW,CAAC;aACpB;YACD,IACE,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,uCAAuC,CAAC;gBAC7D,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,8BAA8B,CAAC,EACpD;gBACA,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,6CAA6C,CAAC,CAAC;gBACpE,OAAO,OAAO,CAAC;aAChB;YACD,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;gBAC5C,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;oBACxC,eAAM,CAAC,KAAK,CACV,EAAE,GAAG,EAAE,EACP,yEAAyE,CAC1E,CAAC;oBACF,OAAO,WAAW,CAAC;iBACpB;gBACD,IAAI,MAAA,GAAG,CAAC,KAAK,0CAAE,QAAQ,CAAC,WAAW,CAAC,EAAE;oBACpC,eAAM,CAAC,IAAI,CACT,EAAE,GAAG,EAAE,EACP,gFAAgF,CACjF,CAAC;oBACF,OAAO,QAAQ,CAAC;iBACjB;gBACD,eAAM,CAAC,IAAI,CACT,EAAE,GAAG,EAAE,EACP,2DAA2D,CAC5D,CAAC;gBACF,OAAO,QAAQ,CAAC;aACjB;YACD,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,gDAAgD,CAAC,CAAC;YACvE,OAAO,QAAQ,CAAC;SACjB;KACF;SAAM,IAAI,YAAY,KAAK,oBAAY,CAAC,GAAG,EAAE;QAC5C,OAAO,qBAAqB,CAAC;KAC9B;SAAM;QACL,eAAM,CAAC,KAAK,CAAC,qBAAqB,YAAY,wBAAwB,CAAC,CAAC;KACzE;IACD,OAAO,cAAc,CAAC;AACxB,CAAC;AAnED,gDAmEC","sourcesContent":["import { getGlobalConfig } from '../../config/global';\nimport type { RenovateConfig } from '../../config/types';\nimport { logger } from '../../logger';\nimport { platform } from '../../platform';\nimport { BranchStatus } from '../../types';\nimport { mergeBranch } from '../../util/git';\n\nexport type AutomergeResult =\n  | 'automerged'\n  | 'automerge aborted - PR exists'\n  | 'branch status error'\n  | 'failed'\n  | 'no automerge'\n  | 'stale'\n  | 'not ready';\n\nexport async function tryBranchAutomerge(\n  config: RenovateConfig\n): Promise<AutomergeResult> {\n  logger.debug('Checking if we can automerge branch');\n  if (!(config.automerge && config.automergeType === 'branch')) {\n    return 'no automerge';\n  }\n  const existingPr = await platform.getBranchPr(config.branchName);\n  if (existingPr) {\n    return 'automerge aborted - PR exists';\n  }\n  const branchStatus = await platform.getBranchStatus(\n    config.branchName,\n    config.requiredStatusChecks\n  );\n  if (branchStatus === BranchStatus.green) {\n    logger.debug(`Automerging branch`);\n    try {\n      if (getGlobalConfig().dryRun) {\n        logger.info('DRY-RUN: Would automerge branch' + config.branchName);\n      } else {\n        await mergeBranch(config.branchName);\n      }\n      logger.info({ branch: config.branchName }, 'Branch automerged');\n      return 'automerged'; // Branch no longer exists\n    } catch (err) /* istanbul ignore next */ {\n      if (err.message === 'not ready') {\n        logger.debug('Branch is not ready for automerge');\n        return 'not ready';\n      }\n      if (\n        err.message.includes('refusing to merge unrelated histories') ||\n        err.message.includes('Not possible to fast-forward')\n      ) {\n        logger.warn({ err }, 'Branch is not up to date - cannot automerge');\n        return 'stale';\n      }\n      if (err.message.includes('Protected branch')) {\n        if (err.message.includes('status check')) {\n          logger.debug(\n            { err },\n            'Branch is not ready for automerge: required status checks are remaining'\n          );\n          return 'not ready';\n        }\n        if (err.stack?.includes('reviewers')) {\n          logger.info(\n            { err },\n            'Branch automerge is not possible due to branch protection (required reviewers)'\n          );\n          return 'failed';\n        }\n        logger.info(\n          { err },\n          'Branch automerge is not possible due to branch protection'\n        );\n        return 'failed';\n      }\n      logger.warn({ err }, 'Unknown error when attempting branch automerge');\n      return 'failed';\n    }\n  } else if (branchStatus === BranchStatus.red) {\n    return 'branch status error';\n  } else {\n    logger.debug(`Branch status is \"${branchStatus}\" - skipping automerge`);\n  }\n  return 'no automerge';\n}\n"]}