"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = exports.validatePresets = exports.getRepositoryConfig = void 0;
const is_1 = __importDefault(require("@sindresorhus/is"));
const bunyan_1 = require("bunyan");
const fs_extra_1 = __importDefault(require("fs-extra"));
const semver_1 = require("semver");
const upath_1 = __importDefault(require("upath"));
const pkg = __importStar(require("../../../package.json"));
const configParser = __importStar(require("../../config"));
const presets_1 = require("../../config/presets");
const secrets_1 = require("../../config/secrets");
const error_messages_1 = require("../../constants/error-messages");
const logger_1 = require("../../logger");
const hostRules = __importStar(require("../../util/host-rules"));
const repositoryWorker = __importStar(require("../repository"));
const autodiscover_1 = require("./autodiscover");
const parse_1 = require("./config/parse");
const initialize_1 = require("./initialize");
const limits_1 = require("./limits");
async function getRepositoryConfig(globalConfig, repository) {
    const repoConfig = configParser.mergeChildConfig(globalConfig, is_1.default.string(repository) ? { repository } : repository);
    repoConfig.localDir = upath_1.default.join(repoConfig.baseDir, `./repos/${repoConfig.platform}/${repoConfig.repository}`);
    await fs_extra_1.default.ensureDir(repoConfig.localDir);
    delete repoConfig.baseDir;
    return configParser.filterConfig(repoConfig, 'repository');
}
exports.getRepositoryConfig = getRepositoryConfig;
function getGlobalConfig() {
    return (0, parse_1.parseConfigs)(process.env, process.argv);
}
function haveReachedLimits() {
    if ((0, limits_1.isLimitReached)(limits_1.Limit.Commits)) {
        logger_1.logger.info('Max commits created for this run.');
        return true;
    }
    return false;
}
/* istanbul ignore next */
function checkEnv() {
    var _a, _b, _c, _d, _e;
    const range = pkg.engines.node;
    const rangeNext = (_a = pkg['engines-next']) === null || _a === void 0 ? void 0 : _a.node;
    if (((_b = process.release) === null || _b === void 0 ? void 0 : _b.name) !== 'node' || !((_c = process.versions) === null || _c === void 0 ? void 0 : _c.node)) {
        logger_1.logger.warn({ release: process.release, versions: process.versions }, 'Unknown node environment detected.');
    }
    else if (!(0, semver_1.satisfies)((_d = process.versions) === null || _d === void 0 ? void 0 : _d.node, range)) {
        logger_1.logger.error({ versions: process.versions, range }, 'Unsupported node environment detected. Please update your node version.');
    }
    else if (rangeNext && !(0, semver_1.satisfies)((_e = process.versions) === null || _e === void 0 ? void 0 : _e.node, rangeNext)) {
        logger_1.logger.warn({ versions: process.versions }, `Please upgrade the version of Node.js used to run Renovate to satisfy "${rangeNext}". Support for your current version will be removed in Renovate's next major release.`);
    }
}
async function validatePresets(config) {
    try {
        await (0, presets_1.resolveConfigPresets)(config);
    }
    catch (err) /* istanbul ignore next */ {
        throw new Error(error_messages_1.CONFIG_PRESETS_INVALID);
    }
}
exports.validatePresets = validatePresets;
async function start() {
    let config;
    try {
        // read global config from file, env and cli args
        config = await getGlobalConfig();
        // initialize all submodules
        config = await (0, initialize_1.globalInitialize)(config);
        await validatePresets(config);
        checkEnv();
        // validate secrets. Will throw and abort if invalid
        (0, secrets_1.validateConfigSecrets)(config);
        // autodiscover repositories (needs to come after platform initialization)
        config = await (0, autodiscover_1.autodiscoverRepositories)(config);
        // Iterate through repositories sequentially
        for (const repository of config.repositories) {
            if (haveReachedLimits()) {
                break;
            }
            const repoConfig = await getRepositoryConfig(config, repository);
            if (repoConfig.hostRules) {
                hostRules.clear();
                repoConfig.hostRules.forEach((rule) => hostRules.add(rule));
                repoConfig.hostRules = [];
            }
            await repositoryWorker.renovateRepository(repoConfig);
            (0, logger_1.setMeta)({});
        }
    }
    catch (err) /* istanbul ignore next */ {
        if (err.message.startsWith('Init: ')) {
            logger_1.logger.fatal(err.message.substring(6));
        }
        else {
            logger_1.logger.fatal({ err }, `Fatal error: ${String(err.message)}`);
        }
        if (!config) {
            // return early if we can't parse config options
            logger_1.logger.debug(`Missing config`);
            return 2;
        }
    }
    finally {
        (0, initialize_1.globalFinalize)(config);
        logger_1.logger.debug(`Renovate exiting`);
    }
    const loggerErrors = (0, logger_1.getProblems)().filter((p) => p.level >= bunyan_1.ERROR);
    if (loggerErrors.length) {
        logger_1.logger.info({ loggerErrors }, 'Renovate is exiting with a non-zero code due to the following logged errors');
        return 1;
    }
    return 0;
}
exports.start = start;
//# sourceMappingURL=index.js.map