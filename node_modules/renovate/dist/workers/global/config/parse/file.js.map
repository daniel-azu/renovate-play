{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/file.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,4DAA6D;AAE7D,+CAA4C;AAE5C,SAAgB,SAAS,CAAC,GAAsB;IAC9C,IAAI,UAAU,GAAG,GAAG,CAAC,oBAAoB,IAAI,QAAQ,CAAC;IACtD,IAAI,CAAC,eAAK,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;QACjC,UAAU,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,IAAI,UAAU,EAAE,CAAC;QAC9C,eAAM,CAAC,KAAK,CAAC,8BAA8B,GAAG,UAAU,CAAC,CAAC;KAC3D;IACD,IAAI,MAAM,GAAc,EAAE,CAAC;IAC3B,IAAI;QACF,oEAAoE;QACpE,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;KAC9B;IAAC,OAAO,GAAG,EAAE;QACZ,qBAAqB;QACrB,IAAI,GAAG,YAAY,WAAW,IAAI,GAAG,YAAY,SAAS,EAAE;YAC1D,eAAM,CAAC,KAAK,CAAC,kCAAkC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;YAC5D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;aAAM,IAAI,GAAG,CAAC,oBAAoB,EAAE;YACnC,eAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;YACpD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;aAAM;YACL,2CAA2C;YAC3C,eAAM,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;SACzD;KACF;IACD,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,IAAA,yBAAa,EAAC,MAAM,CAAC,CAAC;IAC7D,IAAI,UAAU,EAAE;QACd,eAAM,CAAC,IAAI,CACT,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE,EAC1C,wBAAwB,CACzB,CAAC;QACF,MAAM,GAAG,cAAc,CAAC;KACzB;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAhCD,8BAgCC","sourcesContent":["import upath from 'upath';\nimport { migrateConfig } from '../../../../config/migration';\nimport type { AllConfig } from '../../../../config/types';\nimport { logger } from '../../../../logger';\n\nexport function getConfig(env: NodeJS.ProcessEnv): AllConfig {\n  let configFile = env.RENOVATE_CONFIG_FILE || 'config';\n  if (!upath.isAbsolute(configFile)) {\n    configFile = `${process.cwd()}/${configFile}`;\n    logger.debug('Checking for config file in ' + configFile);\n  }\n  let config: AllConfig = {};\n  try {\n    // eslint-disable-next-line global-require,import/no-dynamic-require\n    config = require(configFile);\n  } catch (err) {\n    // istanbul ignore if\n    if (err instanceof SyntaxError || err instanceof TypeError) {\n      logger.fatal(`Could not parse config file \\n ${err.stack}`);\n      process.exit(1);\n    } else if (env.RENOVATE_CONFIG_FILE) {\n      logger.fatal('No custom config file found on disk');\n      process.exit(1);\n    } else {\n      // istanbul ignore next: we can ignore this\n      logger.debug('No config file found on disk - skipping');\n    }\n  }\n  const { isMigrated, migratedConfig } = migrateConfig(config);\n  if (isMigrated) {\n    logger.warn(\n      { originalConfig: config, migratedConfig },\n      'Config needs migrating'\n    );\n    config = migratedConfig;\n  }\n  return config;\n}\n"]}