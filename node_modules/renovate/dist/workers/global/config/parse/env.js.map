{"version":3,"file":"env.js","sourceRoot":"","sources":["../../../../../lib/workers/global/config/parse/env.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\n\nimport { getOptions } from '../../../../config/options';\nimport type { AllConfig, RenovateOptions } from '../../../../config/types';\nimport { PLATFORM_TYPE_GITHUB } from '../../../../constants/platforms';\nimport { getDatasourceList } from '../../../../datasource';\nimport { logger } from '../../../../logger';\nimport type { HostRule } from '../../../../types';\n\n// istanbul ignore if\nif (process.env.ENV_PREFIX) {\n  for (const [key, val] of Object.entries(process.env)) {\n    if (key.startsWith(process.env.ENV_PREFIX)) {\n      process.env[key.replace(process.env.ENV_PREFIX, 'RENOVATE_')] = val;\n    }\n  }\n}\n\nexport function getEnvName(option: Partial<RenovateOptions>): string {\n  if (option.env === false) {\n    return '';\n  }\n  if (option.env) {\n    return option.env;\n  }\n  const nameWithUnderscores = option.name.replace(/([A-Z])/g, '_$1');\n  return `RENOVATE_${nameWithUnderscores.toUpperCase()}`;\n}\n\nexport function getConfig(env: NodeJS.ProcessEnv): AllConfig {\n  const options = getOptions();\n\n  let config: AllConfig = {};\n\n  if (env.RENOVATE_CONFIG) {\n    try {\n      config = JSON.parse(env.RENOVATE_CONFIG);\n      logger.debug({ config }, 'Detected config in env RENOVATE_CONFIG');\n    } catch (err) /* istanbul ignore next */ {\n      logger.fatal({ err }, 'Could not parse RENOVATE_CONFIG');\n      process.exit(1);\n    }\n  }\n\n  config.hostRules ||= [];\n\n  const coersions = {\n    boolean: (val: string): boolean => val === 'true',\n    array: (val: string): string[] => val.split(',').map((el) => el.trim()),\n    string: (val: string): string => val.replace(/\\\\n/g, '\\n'),\n    object: (val: string): any => JSON.parse(val),\n    integer: parseInt,\n  };\n\n  options.forEach((option) => {\n    if (option.env !== false) {\n      const envName = getEnvName(option);\n      if (env[envName]) {\n        // istanbul ignore if\n        if (option.type === 'array' && option.subType === 'object') {\n          try {\n            const parsed = JSON.parse(env[envName]);\n            if (is.array(parsed)) {\n              config[option.name] = parsed;\n            } else {\n              logger.debug(\n                { val: env[envName], envName },\n                'Could not parse object array'\n              );\n            }\n          } catch (err) {\n            logger.debug({ val: env[envName], envName }, 'Could not parse CLI');\n          }\n        } else {\n          const coerce = coersions[option.type];\n          config[option.name] = coerce(env[envName]);\n        }\n      }\n    }\n  });\n\n  if (env.GITHUB_COM_TOKEN) {\n    config.hostRules.push({\n      hostType: PLATFORM_TYPE_GITHUB,\n      matchHost: 'github.com',\n      token: env.GITHUB_COM_TOKEN,\n    });\n  }\n\n  const datasources = new Set(getDatasourceList());\n  const fields = ['token', 'username', 'password'];\n\n  const hostRules: HostRule[] = [];\n\n  const npmEnvPrefixes = ['npm_config_', 'npm_lifecycle_', 'npm_package_'];\n\n  for (const envName of Object.keys(env).sort()) {\n    if (npmEnvPrefixes.some((prefix) => envName.startsWith(prefix))) {\n      logger.trace('Ignoring npm env: ' + envName);\n      continue; // eslint-disable-line no-continue\n    }\n    // Double underscore __ is used in place of hyphen -\n    const splitEnv = envName.toLowerCase().replace(/__/g, '-').split('_');\n    const hostType = splitEnv.shift();\n    if (datasources.has(hostType)) {\n      const suffix = splitEnv.pop();\n      if (fields.includes(suffix)) {\n        let matchHost: string;\n        const rule: HostRule = {};\n        rule[suffix] = env[envName];\n        if (splitEnv.length === 0) {\n          // host-less rule\n        } else if (splitEnv.length === 1) {\n          logger.warn(`Cannot parse ${envName} env`);\n          continue; // eslint-disable-line no-continue\n        } else {\n          matchHost = splitEnv.join('.');\n        }\n        const existingRule = hostRules.find(\n          (hr) => hr.hostType === hostType && hr.matchHost === matchHost\n        );\n        if (existingRule) {\n          // Add current field to existing rule\n          existingRule[suffix] = env[envName];\n        } else {\n          // Create a new rule\n          const newRule: HostRule = {\n            hostType,\n          };\n          if (matchHost) {\n            newRule.matchHost = matchHost;\n          }\n          newRule[suffix] = env[envName];\n          hostRules.push(newRule);\n        }\n      }\n    }\n  }\n\n  config.hostRules = [...config.hostRules, ...hostRules];\n\n  // These env vars are deprecated and deleted to make sure they're not used\n  const unsupportedEnv = [\n    'BITBUCKET_TOKEN',\n    'BITBUCKET_USERNAME',\n    'BITBUCKET_PASSWORD',\n    'GITHUB_ENDPOINT',\n    'GITHUB_TOKEN',\n    'GITLAB_ENDPOINT',\n    'GITLAB_TOKEN',\n    'VSTS_ENDPOINT',\n    'VSTS_TOKEN',\n  ];\n  // eslint-disable-next-line no-param-reassign\n  unsupportedEnv.forEach((val) => delete env[val]);\n\n  return config;\n}\n"]}