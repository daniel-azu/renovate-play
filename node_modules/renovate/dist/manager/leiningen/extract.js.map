{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/leiningen/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import { ClojureDatasource } from '../../datasource/clojure';\nimport type { PackageDependency, PackageFile } from '../types';\nimport type { ExtractContext, ExtractedVariables } from './types';\n\nexport function trimAtKey(str: string, kwName: string): string | null {\n  const regex = new RegExp(`:${kwName}(?=\\\\s)`);\n  const keyOffset = str.search(regex);\n  if (keyOffset < 0) {\n    return null;\n  }\n  const withSpaces = str.slice(keyOffset + kwName.length + 1);\n  const valueOffset = withSpaces.search(/[^\\s]/);\n  if (valueOffset < 0) {\n    return null;\n  }\n  return withSpaces.slice(valueOffset);\n}\n\nexport function expandDepName(name: string): string {\n  return name.includes('/') ? name.replace('/', ':') : `${name}:${name}`;\n}\n\nexport function extractFromVectors(\n  str: string,\n  ctx: ExtractContext = {},\n  vars: ExtractedVariables = {}\n): PackageDependency[] {\n  if (!str.startsWith('[')) {\n    return [];\n  }\n  let balance = 0;\n  const result: PackageDependency[] = [];\n  let idx = 0;\n  let vecPos = 0;\n  let artifactId = '';\n  let version = '';\n\n  const isSpace = (ch: string): boolean => ch && /[\\s,]/.test(ch);\n\n  const cleanStrLiteral = (s: string): string =>\n    s.replace(/^\"/, '').replace(/\"$/, '');\n\n  const yieldDep = (): void => {\n    if (artifactId && version) {\n      const depName = expandDepName(cleanStrLiteral(artifactId));\n      if (version.startsWith('~')) {\n        const currentValue = vars[version.replace(/^~\\s*/, '')];\n        if (currentValue) {\n          result.push({\n            ...ctx,\n            datasource: ClojureDatasource.id,\n            depName,\n            currentValue,\n          });\n        }\n      } else {\n        result.push({\n          ...ctx,\n          datasource: ClojureDatasource.id,\n          depName,\n          currentValue: cleanStrLiteral(version),\n        });\n      }\n    }\n    artifactId = '';\n    version = '';\n  };\n\n  let prevChar = null;\n  while (idx < str.length) {\n    const char = str.charAt(idx);\n    if (char === '[') {\n      balance += 1;\n      if (balance === 2) {\n        vecPos = 0;\n      }\n    } else if (char === ']') {\n      balance -= 1;\n      if (balance === 1) {\n        yieldDep();\n      } else if (balance === 0) {\n        break;\n      }\n    } else if (balance === 2) {\n      if (isSpace(char)) {\n        if (!isSpace(prevChar)) {\n          vecPos += 1;\n        }\n      } else if (vecPos === 0) {\n        artifactId += char;\n      } else if (vecPos === 1) {\n        version += char;\n      }\n    }\n    prevChar = char;\n    idx += 1;\n  }\n  return result;\n}\n\nfunction extractLeinRepos(content: string): string[] {\n  const result = [];\n\n  const repoContent = trimAtKey(\n    content.replace(/;;.*(?=[\\r\\n])/g, ''), // get rid of comments\n    'repositories'\n  );\n\n  if (repoContent) {\n    let balance = 0;\n    let endIdx = 0;\n    for (let idx = 0; idx < repoContent.length; idx += 1) {\n      const char = repoContent.charAt(idx);\n      if (char === '[') {\n        balance += 1;\n      } else if (char === ']') {\n        balance -= 1;\n        if (balance <= 0) {\n          endIdx = idx;\n          break;\n        }\n      }\n    }\n    const repoSectionContent = repoContent.slice(0, endIdx);\n    const matches = repoSectionContent.match(/\"https?:\\/\\/[^\"]*\"/g) || [];\n    const urls = matches.map((x) => x.replace(/^\"/, '').replace(/\"$/, ''));\n    urls.forEach((url) => result.push(url));\n  }\n\n  return result;\n}\n\nconst defRegex =\n  /^[\\s,]*\\([\\s,]*def[\\s,]+(?<varName>[-+*=<>.!?#$%&_|a-zA-Z][-+*=<>.!?#$%&_|a-zA-Z0-9']+)[\\s,]*\"(?<stringValue>[^\"]*)\"[\\s,]*\\)[\\s,]*$/;\n\nexport function extractVariables(content: string): ExtractedVariables {\n  const result: ExtractedVariables = {};\n  const lines = content.split('\\n');\n  for (let idx = 0; idx < lines.length; idx += 1) {\n    const line = lines[idx];\n    const match = defRegex.exec(line);\n    if (match) {\n      const { varName: key, stringValue: val } = match.groups;\n      result[key] = val;\n    }\n  }\n  return result;\n}\n\nexport function extractPackageFile(content: string): PackageFile {\n  const collect = (\n    key: string,\n    registryUrls: string[],\n    vars: ExtractedVariables\n  ): PackageDependency[] => {\n    const ctx = {\n      depType: key,\n      registryUrls,\n    };\n    let result: PackageDependency[] = [];\n    let restContent = trimAtKey(content, key);\n    while (restContent) {\n      result = [...result, ...extractFromVectors(restContent, ctx, vars)];\n      restContent = trimAtKey(restContent, key);\n    }\n    return result;\n  };\n\n  const registryUrls = extractLeinRepos(content);\n  const vars = extractVariables(content);\n\n  const deps: PackageDependency[] = [\n    ...collect('dependencies', registryUrls, vars),\n    ...collect('managed-dependencies', registryUrls, vars),\n    ...collect('plugins', registryUrls, vars),\n    ...collect('pom-plugins', registryUrls, vars),\n  ];\n\n  return { deps };\n}\n"]}