"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractPackageFile = void 0;
const js_yaml_1 = require("js-yaml");
const datasourceJenkins = __importStar(require("../../datasource/jenkins-plugins"));
const logger_1 = require("../../logger");
const types_1 = require("../../types");
const ignore_1 = require("../../util/ignore");
const dockerVersioning = __importStar(require("../../versioning/docker"));
const YamlExtension = /\.ya?ml$/;
function getDependency(plugin) {
    var _a, _b, _c, _d, _e;
    const dep = {
        datasource: datasourceJenkins.id,
        versioning: dockerVersioning.id,
        depName: plugin.artifactId,
    };
    if ((_a = plugin.source) === null || _a === void 0 ? void 0 : _a.version) {
        dep.currentValue = plugin.source.version.toString();
        if (typeof plugin.source.version !== 'string') {
            dep.skipReason = types_1.SkipReason.InvalidVersion;
            logger_1.logger.warn({ dep }, 'Jenkins plugin dependency version is not a string and will be ignored');
        }
    }
    else {
        dep.skipReason = types_1.SkipReason.NoVersion;
    }
    if (((_b = plugin.source) === null || _b === void 0 ? void 0 : _b.version) === 'latest' ||
        ((_c = plugin.source) === null || _c === void 0 ? void 0 : _c.version) === 'experimental' ||
        plugin.groupId) {
        dep.skipReason = types_1.SkipReason.UnsupportedVersion;
    }
    if ((_d = plugin.source) === null || _d === void 0 ? void 0 : _d.url) {
        dep.skipReason = types_1.SkipReason.InternalPackage;
    }
    if (!dep.skipReason && ((_e = plugin.renovate) === null || _e === void 0 ? void 0 : _e.ignore)) {
        dep.skipReason = types_1.SkipReason.Ignored;
    }
    logger_1.logger.debug({ dep }, 'Jenkins plugin dependency');
    return dep;
}
function extractYaml(content) {
    const deps = [];
    try {
        const doc = (0, js_yaml_1.load)(content, { json: true });
        if (doc === null || doc === void 0 ? void 0 : doc.plugins) {
            for (const plugin of doc.plugins) {
                if (plugin.artifactId) {
                    const dep = getDependency(plugin);
                    deps.push(dep);
                }
            }
        }
    }
    catch (err) /* istanbul ignore next */ {
        logger_1.logger.warn({ err }, 'Error parsing Jenkins plugins');
    }
    return deps;
}
function extractText(content) {
    const deps = [];
    const regex = /^\s*(?<depName>[\d\w-]+):(?<currentValue>[^#\s]+)[#\s]*(?<comment>.*)$/;
    for (const line of content.split('\n')) {
        const match = regex.exec(line);
        if (match) {
            const { depName, currentValue, comment } = match.groups;
            const plugin = {
                artifactId: depName,
                source: {
                    version: currentValue,
                },
                renovate: {
                    ignore: (0, ignore_1.isSkipComment)(comment),
                },
            };
            const dep = getDependency(plugin);
            deps.push(dep);
        }
    }
    return deps;
}
function extractPackageFile(content, fileName) {
    logger_1.logger.trace('jenkins.extractPackageFile()');
    const deps = [];
    if (YamlExtension.test(fileName)) {
        deps.push(...extractYaml(content));
    }
    else {
        deps.push(...extractText(content));
    }
    if (deps.length === 0) {
        return null;
    }
    return { deps };
}
exports.extractPackageFile = extractPackageFile;
//# sourceMappingURL=extract.js.map