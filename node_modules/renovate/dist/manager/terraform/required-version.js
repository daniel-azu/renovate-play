"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyseTerraformVersion = exports.extractTerraformRequiredVersion = void 0;
const datasourceGithubTags = __importStar(require("../../datasource/github-tags"));
const logger_1 = require("../../logger");
const common_1 = require("./common");
const util_1 = require("./util");
function extractTerraformRequiredVersion(startingLine, lines) {
    const deps = [];
    let lineNumber = startingLine;
    let braceCounter = 0;
    do {
        // istanbul ignore if
        if (lineNumber > lines.length - 1) {
            logger_1.logger.debug(`Malformed Terraform file detected.`);
        }
        const line = lines[lineNumber];
        // `{` will be counted wit +1 and `}` with -1. Therefore if we reach braceCounter == 0. We have found the end of the terraform block
        const openBrackets = (line.match(/\{/g) || []).length;
        const closedBrackets = (line.match(/\}/g) || []).length;
        braceCounter = braceCounter + openBrackets - closedBrackets;
        const kvMatch = util_1.keyValueExtractionRegex.exec(line);
        if (kvMatch && kvMatch.groups.key === 'required_version') {
            const dep = {
                currentValue: kvMatch.groups.value,
                lineNumber,
                managerData: {
                    terraformDependencyType: common_1.TerraformDependencyTypes.terraform_version,
                },
            };
            deps.push(dep);
            // returning starting line as required_providers are also in the terraform block
            // if we would return the position of the required_version line we would potentially skip the providers
            return { lineNumber: startingLine, dependencies: deps };
        }
        lineNumber += 1;
    } while (braceCounter !== 0);
    return null;
}
exports.extractTerraformRequiredVersion = extractTerraformRequiredVersion;
function analyseTerraformVersion(dep) {
    /* eslint-disable no-param-reassign */
    dep.depType = 'required_version';
    dep.datasource = datasourceGithubTags.id;
    dep.depName = 'hashicorp/terraform';
    dep.extractVersion = 'v(?<version>.*)$';
    /* eslint-enable no-param-reassign */
}
exports.analyseTerraformVersion = analyseTerraformVersion;
//# sourceMappingURL=required-version.js.map