{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../lib/manager/terraform/lockfile/index.ts"],"names":[],"mappings":"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","sourcesContent":["import pMap from 'p-map';\nimport { GetPkgReleasesConfig, getPkgReleases } from '../../../datasource';\nimport { TerraformProviderDatasource } from '../../../datasource/terraform-provider';\nimport { logger } from '../../../logger';\nimport { get as getVersioning } from '../../../versioning';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../../types';\nimport { TerraformProviderHash } from './hash';\nimport type { ProviderLock, ProviderLockUpdate } from './types';\nimport {\n  extractLocks,\n  findLockFile,\n  isPinnedVersion,\n  readLockFile,\n  writeLockUpdates,\n} from './util';\n\nasync function updateAllLocks(\n  locks: ProviderLock[]\n): Promise<ProviderLockUpdate[]> {\n  const updates = await pMap(\n    locks,\n    async (lock) => {\n      const updateConfig: GetPkgReleasesConfig = {\n        versioning: 'hashicorp',\n        datasource: 'terraform-provider',\n        depName: lock.lookupName,\n      };\n      const { releases } = await getPkgReleases(updateConfig);\n      const versioning = getVersioning(updateConfig.versioning);\n      const versionsList = releases.map((release) => release.version);\n      const newVersion = versioning.getSatisfyingVersion(\n        versionsList,\n        lock.constraints\n      );\n\n      // if the new version is the same as the last, signal that no update is needed\n      if (newVersion === lock.version) {\n        return null;\n      }\n      const update: ProviderLockUpdate = {\n        newVersion,\n        newConstraint: lock.constraints,\n        newHashes: await TerraformProviderHash.createHashes(\n          lock.registryUrl,\n          lock.lookupName,\n          newVersion\n        ),\n        ...lock,\n      };\n      return update;\n    },\n    { concurrency: 4 } // allow to look up 4 lock in parallel\n  );\n\n  return updates.filter(Boolean);\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`terraform.updateArtifacts(${packageFileName})`);\n\n  const lockFilePath = findLockFile(packageFileName);\n  try {\n    const lockFileContent = await readLockFile(lockFilePath);\n    if (!lockFileContent) {\n      logger.debug('No .terraform.lock.hcl found');\n      return null;\n    }\n    const locks = extractLocks(lockFileContent);\n    if (!locks) {\n      logger.debug('No Locks in .terraform.lock.hcl found');\n      return null;\n    }\n\n    const updates: ProviderLockUpdate[] = [];\n    if (config.updateType === 'lockFileMaintenance') {\n      // update all locks in the file during maintenance --> only update version in constraints\n      const maintenanceUpdates = await updateAllLocks(locks);\n      updates.push(...maintenanceUpdates);\n    } else if (\n      ['provider', 'required_provider'].includes(updatedDeps[0].depType)\n    ) {\n      // update only specific locks but with constrain updates\n      const dep = updatedDeps[0];\n\n      const lookupName = dep.lookupName ?? dep.depName;\n\n      // handle cases like `Telmate/proxmox`\n      const massagedLookupName = lookupName.toLowerCase();\n\n      const repository = massagedLookupName.includes('/')\n        ? massagedLookupName\n        : `hashicorp/${massagedLookupName}`;\n      const registryUrl = dep.registryUrls\n        ? dep.registryUrls[0]\n        : TerraformProviderDatasource.defaultRegistryUrls[0];\n      const newConstraint = isPinnedVersion(config.newValue)\n        ? config.newVersion\n        : config.newValue;\n      const updateLock = locks.find((value) => value.lookupName === repository);\n      const update: ProviderLockUpdate = {\n        newVersion: config.newVersion,\n        newConstraint,\n        newHashes: await TerraformProviderHash.createHashes(\n          registryUrl,\n          repository,\n          config.newVersion\n        ),\n        ...updateLock,\n      };\n      updates.push(update);\n    }\n\n    // if no updates have been found or there are failed hashes abort\n    if (\n      updates.length === 0 ||\n      updates.some((value) => value.newHashes == null)\n    ) {\n      return null;\n    }\n\n    const res = writeLockUpdates(updates, lockFilePath, lockFileContent);\n    return res ? [res] : null;\n  } catch (err) {\n    /* istanbul ignore next */\n    return [\n      {\n        artifactError: {\n          lockFile: lockFilePath,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}