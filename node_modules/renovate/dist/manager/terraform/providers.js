"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeTerraformProvider = exports.extractTerraformProvider = exports.sourceExtractionRegex = void 0;
const is_1 = __importDefault(require("@sindresorhus/is"));
const terraform_provider_1 = require("../../datasource/terraform-provider");
const logger_1 = require("../../logger");
const types_1 = require("../../types");
const common_1 = require("./common");
const util_1 = require("./util");
exports.sourceExtractionRegex = /^(?:(?<hostname>(?:[a-zA-Z0-9]+\.+)+[a-zA-Z0-9]+)\/)?(?:(?<namespace>[^/]+)\/)?(?<type>[^/]+)/;
function extractTerraformProvider(startingLine, lines, moduleName) {
    let lineNumber = startingLine;
    const deps = [];
    const dep = {
        managerData: {
            moduleName,
            terraformDependencyType: common_1.TerraformDependencyTypes.provider,
        },
    };
    let braceCounter = 0;
    do {
        // istanbul ignore if
        if (lineNumber > lines.length - 1) {
            logger_1.logger.debug(`Malformed Terraform file detected.`);
        }
        const line = lines[lineNumber];
        // `{` will be counted wit +1 and `}` with -1. Therefore if we reach braceCounter == 0. We have found the end of the terraform block
        const openBrackets = (line.match(/\{/g) || []).length;
        const closedBrackets = (line.match(/\}/g) || []).length;
        braceCounter = braceCounter + openBrackets - closedBrackets;
        // only update fields inside the root block
        if (braceCounter === 1) {
            const kvMatch = util_1.keyValueExtractionRegex.exec(line);
            if (kvMatch) {
                if (kvMatch.groups.key === 'version') {
                    dep.currentValue = kvMatch.groups.value;
                }
                else if (kvMatch.groups.key === 'source') {
                    dep.managerData.source = kvMatch.groups.value;
                    dep.managerData.sourceLine = lineNumber;
                }
            }
        }
        lineNumber += 1;
    } while (braceCounter !== 0);
    deps.push(dep);
    // remove last lineNumber addition to not skip a line after the last bracket
    lineNumber -= 1;
    return { lineNumber, dependencies: deps };
}
exports.extractTerraformProvider = extractTerraformProvider;
function analyzeTerraformProvider(dep) {
    /* eslint-disable no-param-reassign */
    dep.depType = 'provider';
    dep.depName = dep.managerData.moduleName;
    dep.datasource = terraform_provider_1.TerraformProviderDatasource.id;
    if (is_1.default.nonEmptyString(dep.managerData.source)) {
        const source = exports.sourceExtractionRegex.exec(dep.managerData.source);
        if (source) {
            // buildin providers https://github.com/terraform-providers
            if (source.groups.namespace === 'terraform-providers') {
                dep.registryUrls = [`https://releases.hashicorp.com`];
            }
            else if (source.groups.hostname) {
                dep.registryUrls = [`https://${source.groups.hostname}`];
                dep.lookupName = `${source.groups.namespace}/${source.groups.type}`;
            }
            else {
                dep.lookupName = dep.managerData.source;
            }
        }
        else {
            dep.skipReason = types_1.SkipReason.UnsupportedUrl;
        }
    }
    /* eslint-enable no-param-reassign */
}
exports.analyzeTerraformProvider = analyzeTerraformProvider;
//# sourceMappingURL=providers.js.map