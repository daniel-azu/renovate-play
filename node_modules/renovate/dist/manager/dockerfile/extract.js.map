{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/dockerfile/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import is from '@sindresorhus/is';\nimport * as datasourceDocker from '../../datasource/docker';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport * as ubuntuVersioning from '../../versioning/ubuntu';\nimport type { PackageDependency, PackageFile } from '../types';\n\nexport function splitImageParts(currentFrom: string): PackageDependency {\n  if (currentFrom.includes('$')) {\n    return {\n      skipReason: SkipReason.ContainsVariable,\n    };\n  }\n  const [currentDepTag, currentDigest] = currentFrom.split('@');\n  const depTagSplit = currentDepTag.split(':');\n  let depName: string;\n  let currentValue: string;\n  if (\n    depTagSplit.length === 1 ||\n    depTagSplit[depTagSplit.length - 1].includes('/')\n  ) {\n    depName = currentDepTag;\n  } else {\n    currentValue = depTagSplit.pop();\n    depName = depTagSplit.join(':');\n  }\n  const dep: PackageDependency = {\n    depName,\n    currentValue,\n    currentDigest,\n  };\n  return dep;\n}\n\nconst quayRegex = /^quay\\.io(?::[1-9][0-9]{0,4})?/i;\n\nexport function getDep(\n  currentFrom: string,\n  specifyReplaceString = true\n): PackageDependency {\n  if (!is.string(currentFrom)) {\n    return {\n      skipReason: SkipReason.InvalidValue,\n    };\n  }\n  const dep = splitImageParts(currentFrom);\n  if (specifyReplaceString) {\n    dep.replaceString = currentFrom;\n    dep.autoReplaceStringTemplate =\n      '{{depName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n  }\n  dep.datasource = datasourceDocker.id;\n\n  // Pretty up special prefixes\n  if (dep.depName) {\n    const specialPrefixes = ['amd64', 'arm64', 'library'];\n    for (const prefix of specialPrefixes) {\n      if (dep.depName.startsWith(`${prefix}/`)) {\n        dep.lookupName = dep.depName;\n        dep.depName = dep.depName.replace(`${prefix}/`, '');\n        if (specifyReplaceString) {\n          dep.autoReplaceStringTemplate =\n            '{{lookupName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n        }\n      }\n    }\n  }\n\n  if (dep.depName === 'ubuntu') {\n    dep.versioning = ubuntuVersioning.id;\n  }\n\n  // Don't display quay.io ports\n  if (quayRegex.test(dep.depName)) {\n    const depName = dep.depName.replace(quayRegex, 'quay.io');\n    if (depName !== dep.depName) {\n      dep.lookupName = dep.depName;\n      dep.depName = depName;\n      dep.autoReplaceStringTemplate =\n        '{{lookupName}}{{#if newValue}}:{{newValue}}{{/if}}{{#if newDigest}}@{{newDigest}}{{/if}}';\n    }\n  }\n\n  return dep;\n}\n\nexport function extractPackageFile(content: string): PackageFile | null {\n  const deps: PackageDependency[] = [];\n  const stageNames: string[] = [];\n\n  const fromMatches = content.matchAll(\n    /^[ \\t]*FROM(?:\\\\\\r?\\n| |\\t|#.*?\\r?\\n|[ \\t]--[a-z]+=\\w+?)*[ \\t](?<image>\\S+)(?:(?:\\\\\\r?\\n| |\\t|#.*\\r?\\n)+as[ \\t]+(?<name>\\S+))?/gim\n  );\n\n  for (const fromMatch of fromMatches) {\n    if (fromMatch.groups.name) {\n      logger.debug('Found a multistage build stage name');\n      stageNames.push(fromMatch.groups.name);\n    }\n    if (fromMatch.groups.image === 'scratch') {\n      logger.debug('Skipping scratch');\n    } else if (stageNames.includes(fromMatch.groups.image)) {\n      logger.debug({ image: fromMatch.groups.image }, 'Skipping alias FROM');\n    } else {\n      const dep = getDep(fromMatch.groups.image);\n      logger.trace(\n        {\n          depName: dep.depName,\n          currentValue: dep.currentValue,\n          currentDigest: dep.currentDigest,\n        },\n        'Dockerfile FROM'\n      );\n      deps.push(dep);\n    }\n  }\n\n  const copyFromMatches = content.matchAll(\n    /^[ \\t]*COPY(?:\\\\\\r?\\n| |\\t|#.*\\r?\\n|[ \\t]--[a-z]+=\\w+?)*[ \\t]--from=(?<image>\\S+)/gim\n  );\n\n  for (const copyFromMatch of copyFromMatches) {\n    if (stageNames.includes(copyFromMatch.groups.image)) {\n      logger.debug(\n        { image: copyFromMatch.groups.image },\n        'Skipping alias COPY --from'\n      );\n    } else if (Number.isNaN(Number(copyFromMatch.groups.image))) {\n      const dep = getDep(copyFromMatch.groups.image);\n      logger.debug(\n        {\n          depName: dep.depName,\n          currentValue: dep.currentValue,\n          currentDigest: dep.currentDigest,\n        },\n        'Dockerfile COPY --from'\n      );\n      deps.push(dep);\n    } else {\n      logger.debug(\n        { image: copyFromMatch.groups.image },\n        'Skipping index reference COPY --from'\n      );\n    }\n  }\n  if (!deps.length) {\n    return null;\n  }\n  for (const d of deps) {\n    d.depType = 'stage';\n  }\n  deps[deps.length - 1].depType = 'final';\n  return { deps };\n}\n"]}