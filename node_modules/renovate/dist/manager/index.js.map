{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/manager/index.ts"],"names":[],"mappings":";;;;;;AAAA,sDAYgC;AAEhC,gDAA6B;AAS7B,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,aAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;AAEhD,MAAM,YAAY,GAAG;IACnB,yBAAa;IACb,2BAAe;IACf,4BAAgB;IAChB,2BAAe;IACf,2BAAe;IACf,+BAAmB;IACnB,yBAAa;IACb,wBAAY;IACZ,2BAAe;IACf,yBAAa;IACb,yBAAa;CACd,CAAC;AAEF,SAAgB,GAAG,CACjB,OAAe,EACf,IAAO;;IAEP,OAAO,MAAA,aAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,0CAAG,IAAI,CAAC,CAAC;AACvC,CAAC;AALD,kBAKC;AACM,MAAM,eAAe,GAAG,GAAa,EAAE,CAAC,YAAY,CAAC;AAA/C,QAAA,eAAe,mBAAgC;AACrD,MAAM,cAAc,GAAG,GAAa,EAAE,CAAC,WAAW,CAAC;AAA7C,QAAA,cAAc,kBAA+B;AACnD,MAAM,WAAW,GAAG,GAA4B,EAAE,CAAC,aAAQ,CAAC;AAAtD,QAAA,WAAW,eAA2C;AAE5D,KAAK,UAAU,sBAAsB,CAC1C,OAAe,EACf,MAAqB,EACrB,KAAe;IAEf,IAAI,CAAC,aAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;QAC1B,OAAO,IAAI,CAAC;KACb;IACD,MAAM,CAAC,GAAG,aAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAChC,IAAI,CAAC,CAAC,sBAAsB,EAAE;QAC5B,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,sBAAsB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC1D,qBAAqB;QACrB,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,IAAI,CAAC;SACb;QACD,OAAO,GAAG,CAAC;KACZ;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAlBD,wDAkBC;AAED,SAAgB,kBAAkB,CAChC,OAAe,EACf,OAAe,EACf,QAAiB,EACjB,MAAsB;IAEtB,IAAI,CAAC,aAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;QAC1B,OAAO,IAAI,CAAC;KACb;IACD,MAAM,CAAC,GAAG,aAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAChC,OAAO,CAAC,CAAC,kBAAkB;QACzB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC;QACjD,CAAC,CAAC,IAAI,CAAC;AACX,CAAC;AAbD,gDAaC;AAED,SAAgB,gBAAgB,CAAC,MAAmB;IAClD,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,MAAM,CAAC;IAC1C,IAAI,CAAC,aAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;QAC1B,OAAO,IAAI,CAAC;KACb;IACD,MAAM,CAAC,GAAG,aAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAChC,IAAI,CAAC,CAAC,gBAAgB,EAAE;QACtB,0CAA0C;QAC1C,OAAO,CAAC,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;KACnC;IACD,IAAI,aAAa,KAAK,MAAM,EAAE;QAC5B,gCAAgC;QAChC,OAAO,SAAS,CAAC;KAClB;IACD,OAAO,MAAM,CAAC,aAAa,CAAC;AAC9B,CAAC;AAfD,4CAeC","sourcesContent":["import {\n  LANGUAGE_DART,\n  LANGUAGE_DOCKER,\n  LANGUAGE_DOT_NET,\n  LANGUAGE_ELIXIR,\n  LANGUAGE_GOLANG,\n  LANGUAGE_JAVASCRIPT,\n  LANGUAGE_NODE,\n  LANGUAGE_PHP,\n  LANGUAGE_PYTHON,\n  LANGUAGE_RUBY,\n  LANGUAGE_RUST,\n} from '../constants/languages';\nimport type { RangeStrategy } from '../types';\nimport managers from './api';\nimport type {\n  ExtractConfig,\n  ManagerApi,\n  PackageFile,\n  RangeConfig,\n  Result,\n} from './types';\n\nconst managerList = Array.from(managers.keys());\n\nconst languageList = [\n  LANGUAGE_DART,\n  LANGUAGE_DOCKER,\n  LANGUAGE_DOT_NET,\n  LANGUAGE_ELIXIR,\n  LANGUAGE_GOLANG,\n  LANGUAGE_JAVASCRIPT,\n  LANGUAGE_NODE,\n  LANGUAGE_PHP,\n  LANGUAGE_PYTHON,\n  LANGUAGE_RUBY,\n  LANGUAGE_RUST,\n];\n\nexport function get<T extends keyof ManagerApi>(\n  manager: string,\n  name: T\n): ManagerApi[T] | null {\n  return managers.get(manager)?.[name];\n}\nexport const getLanguageList = (): string[] => languageList;\nexport const getManagerList = (): string[] => managerList;\nexport const getManagers = (): Map<string, ManagerApi> => managers;\n\nexport async function extractAllPackageFiles(\n  manager: string,\n  config: ExtractConfig,\n  files: string[]\n): Promise<PackageFile[] | null> {\n  if (!managers.has(manager)) {\n    return null;\n  }\n  const m = managers.get(manager);\n  if (m.extractAllPackageFiles) {\n    const res = await m.extractAllPackageFiles(config, files);\n    // istanbul ignore if\n    if (!res) {\n      return null;\n    }\n    return res;\n  }\n  return null;\n}\n\nexport function extractPackageFile(\n  manager: string,\n  content: string,\n  fileName?: string,\n  config?: ExtractConfig\n): Result<PackageFile | null> {\n  if (!managers.has(manager)) {\n    return null;\n  }\n  const m = managers.get(manager);\n  return m.extractPackageFile\n    ? m.extractPackageFile(content, fileName, config)\n    : null;\n}\n\nexport function getRangeStrategy(config: RangeConfig): RangeStrategy {\n  const { manager, rangeStrategy } = config;\n  if (!managers.has(manager)) {\n    return null;\n  }\n  const m = managers.get(manager);\n  if (m.getRangeStrategy) {\n    // Use manager's own function if it exists\n    return m.getRangeStrategy(config);\n  }\n  if (rangeStrategy === 'auto') {\n    // default to 'replace' for auto\n    return 'replace';\n  }\n  return config.rangeStrategy;\n}\n"]}