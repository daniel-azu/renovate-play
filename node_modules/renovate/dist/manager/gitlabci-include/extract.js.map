{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/gitlabci-include/extract.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0DAAkC;AAClC,qCAA+B;AAC/B,mFAAqE;AACrE,yCAAsC;AACtC,uCAAyC;AACzC,6CAAyD;AAGzD,SAAS,yBAAyB,CAAC,UAIlC;IACC,MAAM,GAAG,GAAsB;QAC7B,UAAU,EAAE,oBAAoB,CAAC,EAAE;QACnC,OAAO,EAAE,UAAU,CAAC,OAAO;QAC3B,OAAO,EAAE,YAAY;KACtB,CAAC;IACF,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE;QACnB,GAAG,CAAC,UAAU,GAAG,kBAAU,CAAC,cAAc,CAAC;QAC3C,OAAO,GAAG,CAAC;KACZ;IACD,GAAG,CAAC,YAAY,GAAG,UAAU,CAAC,GAAG,CAAC;IAClC,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAgB,kBAAkB,CAChC,OAAe,EACf,YAAoB,EACpB,MAAqB;;IAErB,MAAM,IAAI,GAAwB,EAAE,CAAC;IACrC,IAAI;QACF,uBAAuB;QACvB,MAAM,GAAG,GAAQ,IAAA,cAAI,EAAC,IAAA,4BAAoB,EAAC,OAAO,CAAC,EAAE;YACnD,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QACH,IAAI,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,KAAI,YAAE,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YACzC,KAAK,MAAM,UAAU,IAAI,GAAG,CAAC,OAAO,EAAE;gBACpC,IAAI,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,OAAO,EAAE;oBACzC,MAAM,GAAG,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC;oBAClD,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACnB,GAAG,CAAC,YAAY,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;qBAClE;oBACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAChB;aACF;SACF;KACF;IAAC,OAAO,GAAG,EAAE,0BAA0B,CAAC;QACvC,IAAI,MAAA,GAAG,CAAC,KAAK,0CAAE,UAAU,CAAC,gBAAgB,CAAC,EAAE;YAC3C,eAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,8CAA8C,CAAC,CAAC;SACvE;aAAM;YACL,eAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE,qCAAqC,CAAC,CAAC;SAC7D;KACF;IACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC;AAjCD,gDAiCC","sourcesContent":["import is from '@sindresorhus/is';\nimport { load } from 'js-yaml';\nimport * as datasourceGitlabTags from '../../datasource/gitlab-tags';\nimport { logger } from '../../logger';\nimport { SkipReason } from '../../types';\nimport { replaceReferenceTags } from '../gitlabci/utils';\nimport type { ExtractConfig, PackageDependency, PackageFile } from '../types';\n\nfunction extractDepFromIncludeFile(includeObj: {\n  file: any;\n  project: string;\n  ref: string;\n}): PackageDependency {\n  const dep: PackageDependency = {\n    datasource: datasourceGitlabTags.id,\n    depName: includeObj.project,\n    depType: 'repository',\n  };\n  if (!includeObj.ref) {\n    dep.skipReason = SkipReason.UnknownVersion;\n    return dep;\n  }\n  dep.currentValue = includeObj.ref;\n  return dep;\n}\n\nexport function extractPackageFile(\n  content: string,\n  _packageFile: string,\n  config: ExtractConfig\n): PackageFile | null {\n  const deps: PackageDependency[] = [];\n  try {\n    // TODO: fix me (#9610)\n    const doc: any = load(replaceReferenceTags(content), {\n      json: true,\n    });\n    if (doc?.include && is.array(doc.include)) {\n      for (const includeObj of doc.include) {\n        if (includeObj.file && includeObj.project) {\n          const dep = extractDepFromIncludeFile(includeObj);\n          if (config.endpoint) {\n            dep.registryUrls = [config.endpoint.replace(/\\/api\\/v4\\/?/, '')];\n          }\n          deps.push(dep);\n        }\n      }\n    }\n  } catch (err) /* istanbul ignore next */ {\n    if (err.stack?.startsWith('YAMLException:')) {\n      logger.debug({ err }, 'YAML exception extracting GitLab CI includes');\n    } else {\n      logger.warn({ err }, 'Error extracting GitLab CI includes');\n    }\n  }\n  if (!deps.length) {\n    return null;\n  }\n  return { deps };\n}\n"]}