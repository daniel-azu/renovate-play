"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processHostRules = void 0;
const is_1 = __importDefault(require("@sindresorhus/is"));
const hostRules = __importStar(require("../../../util/host-rules"));
const url_1 = require("../../../util/url");
function processHostRules() {
    let additionalYarnRcYml;
    // Determine the additional npmrc content to add based on host rules
    const additionalNpmrcContent = [];
    const npmHostRules = hostRules.findAll({
        hostType: 'npm',
    });
    for (const hostRule of npmHostRules) {
        if (hostRule.resolvedHost) {
            let uri = hostRule.matchHost;
            uri = (0, url_1.validateUrl)(uri) ? uri.replace(/^https?:/, '') : `//${uri}/`;
            if (hostRule.token) {
                const key = hostRule.authType === 'Basic' ? '_auth' : '_authToken';
                additionalNpmrcContent.push(`${uri}:${key}=${hostRule.token}`);
                additionalYarnRcYml || (additionalYarnRcYml = { npmRegistries: {} });
                if (hostRule.authType === 'Basic') {
                    additionalYarnRcYml.npmRegistries[uri] = {
                        npmAuthIdent: hostRule.token,
                    };
                }
                else {
                    additionalYarnRcYml.npmRegistries[uri] = {
                        npmAuthToken: hostRule.token,
                    };
                }
            }
            else if (is_1.default.string(hostRule.username) && is_1.default.string(hostRule.password)) {
                const password = Buffer.from(hostRule.password).toString('base64');
                additionalNpmrcContent.push(`${uri}:username=${hostRule.username}`);
                additionalNpmrcContent.push(`${uri}:_password=${password}`);
                additionalYarnRcYml || (additionalYarnRcYml = { npmRegistries: {} });
                additionalYarnRcYml.npmRegistries[uri] = {
                    npmAuthIdent: Buffer.from(`${hostRule.username}:${hostRule.password}`).toString('base64'),
                };
            }
        }
    }
    return { additionalNpmrcContent, additionalYarnRcYml };
}
exports.processHostRules = processHostRules;
//# sourceMappingURL=rules.js.map