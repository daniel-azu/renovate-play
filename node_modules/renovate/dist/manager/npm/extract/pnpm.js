"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectPnpmWorkspaces = exports.findPnpmWorkspace = exports.extractPnpmFilters = void 0;
const is_1 = __importDefault(require("@sindresorhus/is"));
const js_yaml_1 = require("js-yaml");
const logger_1 = require("../../../logger");
const fs_1 = require("../../../util/fs");
const utils_1 = require("./utils");
async function extractPnpmFilters(fileName) {
    try {
        const contents = (0, js_yaml_1.load)(await (0, fs_1.readLocalFile)(fileName, 'utf8'), {
            json: true,
        });
        if (!Array.isArray(contents.packages) ||
            !contents.packages.every((item) => is_1.default.string(item))) {
            logger_1.logger.trace({ fileName }, 'Failed to find required "packages" array in pnpm-workspace.yaml');
            return null;
        }
        return contents.packages;
    }
    catch (err) {
        logger_1.logger.trace({ fileName, err }, 'Failed to parse pnpm-workspace.yaml');
        return null;
    }
}
exports.extractPnpmFilters = extractPnpmFilters;
async function findPnpmWorkspace(packageFile) {
    // search for pnpm-workspace.yaml
    const workspaceYamlPath = await (0, fs_1.findLocalSiblingOrParent)(packageFile, 'pnpm-workspace.yaml');
    if (!workspaceYamlPath) {
        logger_1.logger.trace({ packageFile }, 'Failed to locate pnpm-workspace.yaml in a parent directory.');
        return null;
    }
    // search for pnpm-lock.yaml next to pnpm-workspace.yaml
    const pnpmLockfilePath = (0, fs_1.getSiblingFileName)(workspaceYamlPath, 'pnpm-lock.yaml');
    if (!(await (0, fs_1.localPathExists)(pnpmLockfilePath))) {
        logger_1.logger.trace({ workspaceYamlPath, packageFile }, 'Failed to find a pnpm-lock.yaml sibling for the workspace.');
        return null;
    }
    return {
        lockFilePath: pnpmLockfilePath,
        workspaceYamlPath,
    };
}
exports.findPnpmWorkspace = findPnpmWorkspace;
async function detectPnpmWorkspaces(packageFiles) {
    logger_1.logger.debug(`Detecting pnpm Workspaces`);
    const packageFilterCache = new Map();
    for (const p of packageFiles) {
        const { packageFile, pnpmShrinkwrap } = p;
        // check if pnpmShrinkwrap-file has already been provided
        if (pnpmShrinkwrap) {
            logger_1.logger.trace({ packageFile, pnpmShrinkwrap }, 'Found an existing pnpm shrinkwrap file; skipping pnpm monorepo check.');
            continue; // eslint-disable-line no-continue
        }
        // search for corresponding pnpm workspace
        const pnpmWorkspace = await findPnpmWorkspace(packageFile);
        if (pnpmWorkspace === null) {
            continue; // eslint-disable-line no-continue
        }
        const { workspaceYamlPath, lockFilePath } = pnpmWorkspace;
        // check if package matches workspace filter
        if (!packageFilterCache.has(workspaceYamlPath)) {
            const filters = await extractPnpmFilters(workspaceYamlPath);
            packageFilterCache.set(workspaceYamlPath, filters);
        }
        const packageFilters = packageFilterCache.get(workspaceYamlPath);
        const isPackageInWorkspace = packageFilters !== null &&
            (0, utils_1.matchesAnyPattern)(packageFile, packageFilters.map((filter) => filter.replace(/\/?$/, '/package.json')));
        if (isPackageInWorkspace) {
            p.pnpmShrinkwrap = lockFilePath;
        }
        else {
            logger_1.logger.trace({ packageFile, workspaceYamlPath }, `Didn't find the package in the pnpm workspace`);
        }
    }
}
exports.detectPnpmWorkspaces = detectPnpmWorkspaces;
//# sourceMappingURL=pnpm.js.map