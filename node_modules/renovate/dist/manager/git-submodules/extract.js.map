{"version":3,"file":"extract.js","sourceRoot":"","sources":["../../../lib/manager/git-submodules/extract.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport Git, { SimpleGit } from 'simple-git';\nimport upath from 'upath';\nimport { getGlobalConfig } from '../../config/global';\nimport * as datasourceGitRefs from '../../datasource/git-refs';\nimport { logger } from '../../logger';\nimport { getHttpUrl, getRemoteUrlWithToken } from '../../util/git/url';\nimport type { ExtractConfig, PackageFile } from '../types';\nimport { GitModule } from './types';\n\nasync function getUrl(\n  git: SimpleGit,\n  gitModulesPath: string,\n  submoduleName: string\n): Promise<string> {\n  const path = (\n    await Git().raw([\n      'config',\n      '--file',\n      gitModulesPath,\n      '--get',\n      `submodule.${submoduleName}.url`,\n    ])\n  )?.trim();\n  if (!path?.startsWith('../')) {\n    return path;\n  }\n  const remoteUrl = (\n    await git.raw(['config', '--get', 'remote.origin.url'])\n  ).trim();\n  return URL.resolve(`${remoteUrl}/`, path);\n}\n\nconst headRefRe = /ref: refs\\/heads\\/(?<branch>\\w+)\\s/;\n\nasync function getDefaultBranch(subModuleUrl: string): Promise<string> {\n  const val = await Git().listRemote(['--symref', subModuleUrl, 'HEAD']);\n  return headRefRe.exec(val)?.groups?.branch ?? 'master';\n}\n\nasync function getBranch(\n  gitModulesPath: string,\n  submoduleName: string,\n  subModuleUrl: string\n): Promise<string> {\n  return (\n    (await Git().raw([\n      'config',\n      '--file',\n      gitModulesPath,\n      '--get',\n      `submodule.${submoduleName}.branch`,\n    ])) || (await getDefaultBranch(subModuleUrl))\n  ).trim();\n}\n\nasync function getModules(\n  git: SimpleGit,\n  gitModulesPath: string\n): Promise<GitModule[]> {\n  const res: GitModule[] = [];\n  try {\n    const modules = (\n      (await git.raw([\n        'config',\n        '--file',\n        gitModulesPath,\n        '--get-regexp',\n        '\\\\.path',\n      ])) ?? /* istanbul ignore next: should never happen */ ''\n    )\n      .trim()\n      .split(/\\n/)\n      .filter((s) => !!s);\n\n    for (const line of modules) {\n      const [, name, path] = line.split(/submodule\\.(.+?)\\.path\\s(.+)/);\n      res.push({ name, path });\n    }\n  } catch (err) /* istanbul ignore next */ {\n    logger.warn({ err }, 'Error getting git submodules during extract');\n  }\n  return res;\n}\n\nexport default async function extractPackageFile(\n  _content: string,\n  fileName: string,\n  config: ExtractConfig\n): Promise<PackageFile | null> {\n  const { localDir } = getGlobalConfig();\n  const git = Git(localDir);\n  const gitModulesPath = upath.join(localDir, fileName);\n\n  const depNames = await getModules(git, gitModulesPath);\n\n  if (!depNames.length) {\n    return null;\n  }\n\n  const deps = (\n    await Promise.all(\n      depNames.map(async ({ name, path }) => {\n        try {\n          const [currentDigest] = (await git.subModule(['status', path]))\n            .trim()\n            .replace(/^[-+]/, '')\n            .split(/\\s/);\n          const subModuleUrl = await getUrl(git, gitModulesPath, name);\n          // hostRules only understands HTTP URLs\n          // Find HTTP URL, then apply token\n          let httpSubModuleUrl = getHttpUrl(subModuleUrl);\n          httpSubModuleUrl = getRemoteUrlWithToken(httpSubModuleUrl);\n          const currentValue = await getBranch(\n            gitModulesPath,\n            name,\n            httpSubModuleUrl\n          );\n          return {\n            depName: path,\n            lookupName: getHttpUrl(subModuleUrl),\n            currentValue,\n            currentDigest,\n          };\n        } catch (err) /* istanbul ignore next */ {\n          logger.warn(\n            { err },\n            'Error mapping git submodules during extraction'\n          );\n          return null;\n        }\n      })\n    )\n  ).filter(Boolean);\n\n  return { deps, datasource: datasourceGitRefs.id };\n}\n"]}