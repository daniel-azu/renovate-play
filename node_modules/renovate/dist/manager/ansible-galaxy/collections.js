"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractCollections = void 0;
const galaxy_collection_1 = require("../../datasource/galaxy-collection");
const datasourceGitTags = __importStar(require("../../datasource/git-tags"));
const datasourceGithubTags = __importStar(require("../../datasource/github-tags"));
const types_1 = require("../../types");
const util_1 = require("./util");
function interpretLine(lineMatch, lineNumber, dependency) {
    const localDependency = dependency;
    const key = lineMatch[2];
    const value = lineMatch[3].replace(/["']/g, '');
    switch (key) {
        case 'name': {
            localDependency.managerData.name = value;
            break;
        }
        case 'version': {
            localDependency.managerData.version = value;
            localDependency.currentValue = value;
            break;
        }
        case 'source': {
            localDependency.managerData.source = value;
            localDependency.registryUrls = value ? [value] : [];
            break;
        }
        case 'type': {
            localDependency.managerData.type = value;
            break;
        }
        default: {
            // fail if we find an unexpected key
            localDependency.skipReason = types_1.SkipReason.Unsupported;
        }
    }
}
function handleGitDep(dep, nameMatch) {
    /* eslint-disable no-param-reassign */
    dep.datasource = datasourceGitTags.id;
    if (nameMatch) {
        // if a github.com repository is referenced use github-tags instead of git-tags
        if (nameMatch.groups.hostname === 'github.com') {
            dep.datasource = datasourceGithubTags.id;
        }
        else {
            dep.datasource = datasourceGitTags.id;
        }
        // source definition without version appendix
        const source = nameMatch.groups.source;
        const massagedDepName = nameMatch.groups.depName.replace(/.git$/, '');
        dep.depName = `${nameMatch.groups.hostname}/${massagedDepName}`;
        // remove leading `git+` from URLs like `git+https://...`
        dep.lookupName = source.replace(/git\+/, '');
        // if version is declared using version appendix `<source url>,v1.2.0`, use it
        if (nameMatch.groups.version) {
            dep.currentValue = nameMatch.groups.version;
        }
        else {
            dep.currentValue = dep.managerData.version;
        }
    }
    /* eslint-enable no-param-reassign */
}
function handleGalaxyDep(dep) {
    /* eslint-disable no-param-reassign */
    dep.datasource = galaxy_collection_1.GalaxyCollectionDatasource.id;
    dep.depName = dep.managerData.name;
    dep.registryUrls = dep.managerData.source ? [dep.managerData.source] : [];
    dep.currentValue = dep.managerData.version;
    /* eslint-enable no-param-reassign */
}
function finalize(dependency) {
    const dep = dependency;
    dep.depName = dep.managerData.name;
    const name = dep.managerData.name;
    const nameMatch = util_1.nameMatchRegex.exec(name);
    // use type if defined
    switch (dependency.managerData.type) {
        case 'galaxy':
            handleGalaxyDep(dep);
            break;
        case 'git':
            handleGitDep(dep, nameMatch);
            break;
        case 'file':
            dep.skipReason = types_1.SkipReason.LocalDependency;
            break;
        case null:
            // try to find out type based on source
            if (nameMatch) {
                handleGitDep(dep, nameMatch);
                break;
            }
            if (util_1.galaxyDepRegex.exec(dep.managerData.name)) {
                dep.datasource = galaxy_collection_1.GalaxyCollectionDatasource.id;
                dep.depName = dep.managerData.name;
                break;
            }
            dep.skipReason = types_1.SkipReason.NoSourceMatch;
            break;
        default:
            dep.skipReason = types_1.SkipReason.Unsupported;
            return true;
    }
    if (dependency.currentValue == null && dep.skipReason == null) {
        dep.skipReason = types_1.SkipReason.NoVersion;
    }
    return true;
}
function extractCollections(lines) {
    const deps = [];
    for (let lineNumber = 0; lineNumber < lines.length; lineNumber += 1) {
        let lineMatch = util_1.newBlockRegEx.exec(lines[lineNumber]);
        if (lineMatch) {
            const dep = {
                depType: 'galaxy-collection',
                managerData: {
                    name: null,
                    version: null,
                    type: null,
                    source: null,
                },
            };
            do {
                interpretLine(lineMatch, lineNumber, dep);
                const line = lines[lineNumber + 1];
                if (!line) {
                    break;
                }
                lineMatch = util_1.blockLineRegEx.exec(line);
                if (lineMatch) {
                    lineNumber += 1;
                }
            } while (lineMatch);
            if (finalize(dep)) {
                delete dep.managerData;
                deps.push(dep);
            }
        }
    }
    return deps;
}
exports.extractCollections = extractCollections;
//# sourceMappingURL=collections.js.map