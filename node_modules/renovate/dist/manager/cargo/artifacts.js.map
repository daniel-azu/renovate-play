{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../../../lib/manager/cargo/artifacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { quote } from 'shlex';\nimport { TEMPORARY_ERROR } from '../../constants/error-messages';\nimport { logger } from '../../logger';\nimport { ExecOptions, exec } from '../../util/exec';\nimport {\n  findLocalSiblingOrParent,\n  readLocalFile,\n  writeLocalFile,\n} from '../../util/fs';\nimport type { UpdateArtifact, UpdateArtifactsResult } from '../types';\n\nasync function cargoUpdate(\n  manifestPath: string,\n  packageName?: string\n): Promise<void> {\n  let cmd = `cargo update --manifest-path ${quote(manifestPath)}`;\n  if (packageName) {\n    cmd += ` --package ${quote(packageName)}`;\n  }\n\n  const execOptions: ExecOptions = {\n    docker: {\n      image: 'rust',\n    },\n  };\n  try {\n    await exec(cmd, execOptions);\n  } catch (err) /* istanbul ignore next */ {\n    // Two different versions of one dependency can be present in the same\n    // crate, and when that happens an attempt to update it with --package ${dep}\n    // key results in cargo exiting with error code `101` and an error message:\n    // \"error: There are multiple `${dep}` packages in your project\".\n    //\n    // If exception `err` was caused by this, we execute `updateAll` function\n    // instead of returning an error. `updateAll` function just executes\n    // \"cargo update --manifest-path ${localPackageFileName}\" without the `--package` key.\n    //\n    // If exception `err` was not caused by this, we just rethrow it. It will be caught\n    // by the outer try { } catch {} and processed normally.\n    const msgStart = 'error: There are multiple';\n    if (err.code === 101 && err.stderr.startsWith(msgStart)) {\n      cmd = cmd.replace(/ --package.*/, '');\n      await exec(cmd, execOptions);\n    } else {\n      throw err; // this is caught below\n    }\n  }\n}\n\nexport async function updateArtifacts({\n  packageFileName,\n  updatedDeps,\n  newPackageFileContent,\n  config,\n}: UpdateArtifact): Promise<UpdateArtifactsResult[] | null> {\n  logger.debug(`cargo.updateArtifacts(${packageFileName})`);\n\n  const isLockFileMaintenance = config.updateType === 'lockFileMaintenance';\n\n  if (\n    !isLockFileMaintenance &&\n    (updatedDeps === undefined || updatedDeps.length < 1)\n  ) {\n    logger.debug('No updated cargo deps - returning null');\n    return null;\n  }\n\n  // For standalone package crates, the `Cargo.lock` will be in the same\n  // directory as `Cargo.toml` (ie. a sibling). For cargo workspaces, it\n  // will be further up.\n  const lockFileName = await findLocalSiblingOrParent(\n    packageFileName,\n    'Cargo.lock'\n  );\n  const existingLockFileContent = lockFileName\n    ? await readLocalFile(lockFileName)\n    : null;\n  if (!existingLockFileContent) {\n    logger.debug('No Cargo.lock found');\n    return null;\n  }\n  try {\n    await writeLocalFile(packageFileName, newPackageFileContent);\n    logger.debug('Updating ' + lockFileName);\n    for (let i = 0; i < updatedDeps.length; i += 1) {\n      const dep = updatedDeps[i];\n      // Update dependency `${dep}` in Cargo.lock file corresponding to Cargo.toml file located\n      // at ${localPackageFileName} path\n      await cargoUpdate(packageFileName, dep.lookupName ?? dep.depName);\n    }\n    if (isLockFileMaintenance) {\n      await cargoUpdate(packageFileName);\n    }\n    logger.debug('Returning updated Cargo.lock');\n    const newCargoLockContent = await readLocalFile(lockFileName);\n    if (existingLockFileContent === newCargoLockContent) {\n      logger.debug('Cargo.lock is unchanged');\n      return null;\n    }\n    return [\n      {\n        file: {\n          name: lockFileName,\n          contents: newCargoLockContent,\n        },\n      },\n    ];\n  } catch (err) {\n    // istanbul ignore if\n    if (err.message === TEMPORARY_ERROR) {\n      throw err;\n    }\n    logger.warn({ err }, 'Failed to update Cargo lock file');\n    return [\n      {\n        artifactError: {\n          lockFile: lockFileName,\n          stderr: err.message,\n        },\n      },\n    ];\n  }\n}\n"]}