"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateArtifacts = void 0;
const shlex_1 = require("shlex");
const error_messages_1 = require("../../constants/error-messages");
const logger_1 = require("../../logger");
const exec_1 = require("../../util/exec");
const fs_1 = require("../../util/fs");
const hostRules = __importStar(require("../../util/host-rules"));
const hexRepoUrl = 'https://hex.pm/';
async function updateArtifacts({ packageFileName, updatedDeps, newPackageFileContent, }) {
    logger_1.logger.debug(`mix.getArtifacts(${packageFileName})`);
    if (updatedDeps.length < 1) {
        logger_1.logger.debug('No updated mix deps - returning null');
        return null;
    }
    const lockFileName = (0, fs_1.getSiblingFileName)(packageFileName, 'mix.lock');
    try {
        await (0, fs_1.writeLocalFile)(packageFileName, newPackageFileContent);
    }
    catch (err) {
        logger_1.logger.warn({ err }, 'mix.exs could not be written');
        return [
            {
                artifactError: {
                    lockFile: lockFileName,
                    stderr: err.message,
                },
            },
        ];
    }
    const existingLockFileContent = await (0, fs_1.readLocalFile)(lockFileName, 'utf8');
    if (!existingLockFileContent) {
        logger_1.logger.debug('No mix.lock found');
        return null;
    }
    const organizations = new Set();
    for (const { lookupName } of updatedDeps) {
        if (lookupName) {
            const [, organization] = lookupName.split(':');
            if (organization) {
                organizations.add(organization);
            }
        }
    }
    const preCommands = Array.from(organizations).reduce((acc, organization) => {
        const url = `${hexRepoUrl}api/repos/${organization}/`;
        const { token } = hostRules.find({ url });
        if (token) {
            logger_1.logger.debug(`Authenticating to hex organization ${organization}`);
            const authCommand = `mix hex.organization auth ${organization} --key ${token}`;
            return [...acc, authCommand];
        }
        return acc;
    }, []);
    const execOptions = {
        cwdFile: packageFileName,
        docker: {
            image: 'elixir',
            preCommands,
        },
    };
    const command = [
        'mix',
        'deps.update',
        ...updatedDeps.map((dep) => (0, shlex_1.quote)(dep.depName)),
    ].join(' ');
    try {
        await (0, exec_1.exec)(command, execOptions);
    }
    catch (err) {
        // istanbul ignore if
        if (err.message === error_messages_1.TEMPORARY_ERROR) {
            throw err;
        }
        logger_1.logger.warn({ err, message: err.message, command }, 'Failed to update Mix lock file');
        return [
            {
                artifactError: {
                    lockFile: lockFileName,
                    stderr: err.message,
                },
            },
        ];
    }
    const newMixLockContent = await (0, fs_1.readLocalFile)(lockFileName, 'utf8');
    if (existingLockFileContent === newMixLockContent) {
        logger_1.logger.debug('mix.lock is unchanged');
        return null;
    }
    logger_1.logger.debug('Returning updated mix.lock');
    return [
        {
            file: {
                name: lockFileName,
                contents: newMixLockContent,
            },
        },
    ];
}
exports.updateArtifacts = updateArtifacts;
//# sourceMappingURL=artifacts.js.map