"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HexDatasource = void 0;
const logger_1 = require("../../logger");
const decorator_1 = require("../../util/cache/package/decorator");
const hexVersioning = __importStar(require("../../versioning/hex"));
const datasource_1 = require("../datasource");
class HexDatasource extends datasource_1.Datasource {
    constructor() {
        super(HexDatasource.id);
        this.defaultRegistryUrls = ['https://hex.pm/'];
        this.customRegistrySupport = false;
        this.defaultVersioning = hexVersioning.id;
    }
    async getReleases({ lookupName, registryUrl, }) {
        var _a;
        // Get dependency name from lookupName.
        // If the dependency is private lookupName contains organization name as following:
        // hexPackageName:organizationName
        // hexPackageName is used to pass it in hex dep url
        // organizationName is used for accessing to private deps
        const [hexPackageName, organizationName] = lookupName.split(':');
        const organizationUrlPrefix = organizationName
            ? `repos/${organizationName}/`
            : '';
        const hexUrl = `${registryUrl}api/${organizationUrlPrefix}packages/${hexPackageName}`;
        let response;
        try {
            response = await this.http.getJson(hexUrl);
        }
        catch (err) {
            this.handleGenericErrors(err);
        }
        const hexRelease = response.body;
        if (!hexRelease) {
            logger_1.logger.warn({ datasource: 'hex', lookupName }, `Invalid response body`);
            return null;
        }
        const { releases = [], html_url: homepage, meta } = hexRelease;
        if (releases.length === 0) {
            logger_1.logger.debug(`No versions found for ${hexPackageName} (${hexUrl})`); // prettier-ignore
            return null;
        }
        const result = {
            releases: releases.map(({ version, inserted_at }) => inserted_at
                ? {
                    version,
                    releaseTimestamp: inserted_at,
                }
                : { version }),
        };
        if (homepage) {
            result.homepage = homepage;
        }
        if ((_a = meta === null || meta === void 0 ? void 0 : meta.links) === null || _a === void 0 ? void 0 : _a.Github) {
            result.sourceUrl = hexRelease.meta.links.Github;
        }
        return result;
    }
}
HexDatasource.id = 'hex';
__decorate([
    (0, decorator_1.cache)({
        namespace: `datasource-${HexDatasource.id}`,
        key: ({ lookupName }) => lookupName,
    })
], HexDatasource.prototype, "getReleases", null);
exports.HexDatasource = HexDatasource;
//# sourceMappingURL=index.js.map