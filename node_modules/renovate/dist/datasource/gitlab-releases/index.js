"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitlabReleasesDatasource = void 0;
const decorator_1 = require("../../util/cache/package/decorator");
const gitlab_1 = require("../../util/http/gitlab");
const datasource_1 = require("../datasource");
class GitlabReleasesDatasource extends datasource_1.Datasource {
    constructor() {
        super(GitlabReleasesDatasource.id);
        this.defaultRegistryUrls = ['https://gitlab.com'];
        this.http = new gitlab_1.GitlabHttp(GitlabReleasesDatasource.id);
    }
    async getReleases({ registryUrl, lookupName, }) {
        const urlEncodedRepo = encodeURIComponent(lookupName);
        const apiUrl = `${registryUrl}/api/v4/projects/${urlEncodedRepo}/releases`;
        try {
            const gitlabReleasesResponse = (await this.http.getJson(apiUrl)).body;
            return {
                sourceUrl: `${registryUrl}/${lookupName}`,
                releases: gitlabReleasesResponse.map(({ tag_name, released_at }) => {
                    const release = {
                        registryUrl,
                        gitRef: tag_name,
                        version: tag_name,
                        releaseTimestamp: released_at,
                    };
                    return release;
                }),
            };
        }
        catch (e) {
            this.handleGenericErrors(e);
        }
        /* istanbul ignore next */
        return null;
    }
}
GitlabReleasesDatasource.id = 'gitlab-releases';
GitlabReleasesDatasource.registryStrategy = 'first';
__decorate([
    (0, decorator_1.cache)({
        namespace: `datasource-${GitlabReleasesDatasource.id}`,
        key: ({ registryUrl, lookupName }) => `${registryUrl}/${lookupName}`,
    })
], GitlabReleasesDatasource.prototype, "getReleases", null);
exports.GitlabReleasesDatasource = GitlabReleasesDatasource;
//# sourceMappingURL=index.js.map