"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReleases = exports.getUrls = exports.getLatestVersion = exports.getPackageReleases = exports.getArtifactSubdirs = exports.registryStrategy = exports.defaultVersioning = exports.defaultRegistryUrls = exports.customRegistrySupport = exports.id = void 0;
const xmldoc_1 = require("xmldoc");
const logger_1 = require("../../logger");
const ivyVersioning = __importStar(require("../../versioning/ivy"));
const compare_1 = require("../../versioning/maven/compare");
const common_1 = require("../maven/common");
const util_1 = require("../maven/util");
const util_2 = require("../sbt-plugin/util");
exports.id = 'sbt-package';
exports.customRegistrySupport = true;
exports.defaultRegistryUrls = [common_1.MAVEN_REPO];
exports.defaultVersioning = ivyVersioning.id;
exports.registryStrategy = 'hunt';
const ensureTrailingSlash = (str) => str.replace(/\/?$/, '/');
async function getArtifactSubdirs(searchRoot, artifact, scalaVersion) {
    const { body: indexContent } = await (0, util_1.downloadHttpProtocol)(ensureTrailingSlash(searchRoot), 'sbt');
    if (indexContent) {
        const parseSubdirs = (content) => (0, util_2.parseIndexDir)(content, (x) => {
            if (x === artifact) {
                return true;
            }
            if (x.startsWith(`${artifact}_native`)) {
                return false;
            }
            if (x.startsWith(`${artifact}_sjs`)) {
                return false;
            }
            return x.startsWith(`${artifact}_`);
        });
        let artifactSubdirs = parseSubdirs(indexContent);
        if (scalaVersion &&
            artifactSubdirs.includes(`${artifact}_${scalaVersion}`)) {
            artifactSubdirs = [`${artifact}_${scalaVersion}`];
        }
        return artifactSubdirs;
    }
    return null;
}
exports.getArtifactSubdirs = getArtifactSubdirs;
async function getPackageReleases(searchRoot, artifactSubdirs) {
    if (artifactSubdirs) {
        const releases = [];
        const parseReleases = (content) => (0, util_2.parseIndexDir)(content, (x) => !/^\.+$/.test(x));
        for (const searchSubdir of artifactSubdirs) {
            const { body: content } = await (0, util_1.downloadHttpProtocol)(ensureTrailingSlash(`${searchRoot}/${searchSubdir}`), 'sbt');
            if (content) {
                const subdirReleases = parseReleases(content);
                subdirReleases.forEach((x) => releases.push(x));
            }
        }
        if (releases.length) {
            return [...new Set(releases)].sort(compare_1.compare);
        }
    }
    return null;
}
exports.getPackageReleases = getPackageReleases;
function getLatestVersion(versions) {
    if (versions === null || versions === void 0 ? void 0 : versions.length) {
        return versions.reduce((latestVersion, version) => (0, compare_1.compare)(version, latestVersion) === 1 ? version : latestVersion);
    }
    return null;
}
exports.getLatestVersion = getLatestVersion;
async function getUrls(searchRoot, artifactDirs, version) {
    const result = {};
    if (!(artifactDirs === null || artifactDirs === void 0 ? void 0 : artifactDirs.length)) {
        return result;
    }
    if (!version) {
        return result;
    }
    for (const artifactDir of artifactDirs) {
        const [artifact] = artifactDir.split('_');
        const pomFileNames = [
            `${artifactDir}-${version}.pom`,
            `${artifact}-${version}.pom`,
        ];
        for (const pomFileName of pomFileNames) {
            const pomUrl = `${searchRoot}/${artifactDir}/${version}/${pomFileName}`;
            const { body: content } = await (0, util_1.downloadHttpProtocol)(pomUrl, 'sbt');
            if (content) {
                const pomXml = new xmldoc_1.XmlDocument(content);
                const homepage = pomXml.valueWithPath('url');
                if (homepage) {
                    result.homepage = homepage;
                }
                const sourceUrl = pomXml.valueWithPath('scm.url');
                if (sourceUrl) {
                    result.sourceUrl = sourceUrl
                        .replace(/^scm:/, '')
                        .replace(/^git:/, '')
                        .replace(/^git@github.com:/, 'https://github.com/')
                        .replace(/\.git$/, '');
                }
                return result;
            }
        }
    }
    return result;
}
exports.getUrls = getUrls;
async function getReleases({ lookupName, registryUrl, }) {
    const [groupId, artifactId] = lookupName.split(':');
    const groupIdSplit = groupId.split('.');
    const artifactIdSplit = artifactId.split('_');
    const [artifact, scalaVersion] = artifactIdSplit;
    const repoRoot = ensureTrailingSlash(registryUrl);
    const searchRoots = [];
    // Optimize lookup order
    searchRoots.push(`${repoRoot}${groupIdSplit.join('/')}`);
    searchRoots.push(`${repoRoot}${groupIdSplit.join('.')}`);
    for (let idx = 0; idx < searchRoots.length; idx += 1) {
        const searchRoot = searchRoots[idx];
        const artifactSubdirs = await getArtifactSubdirs(searchRoot, artifact, scalaVersion);
        const versions = await getPackageReleases(searchRoot, artifactSubdirs);
        const latestVersion = getLatestVersion(versions);
        const urls = await getUrls(searchRoot, artifactSubdirs, latestVersion);
        const dependencyUrl = searchRoot;
        if (versions) {
            return {
                ...urls,
                dependencyUrl,
                releases: versions.map((v) => ({ version: v })),
            };
        }
    }
    logger_1.logger.debug(`No versions found for ${lookupName} in ${searchRoots.length} repositories`);
    return null;
}
exports.getReleases = getReleases;
//# sourceMappingURL=index.js.map