"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const adoptium_java_1 = require("./adoptium-java");
const bitbucket_tags_1 = require("./bitbucket-tags");
const cdnjs_1 = require("./cdnjs");
const clojure_1 = require("./clojure");
const crate = __importStar(require("./crate"));
const dart_1 = require("./dart");
const docker = __importStar(require("./docker"));
const galaxy_1 = require("./galaxy");
const galaxy_collection_1 = require("./galaxy-collection");
const gitRefs = __importStar(require("./git-refs"));
const gitTags = __importStar(require("./git-tags"));
const githubReleases = __importStar(require("./github-releases"));
const githubTags = __importStar(require("./github-tags"));
const gitlab_releases_1 = require("./gitlab-releases");
const gitlabTags = __importStar(require("./gitlab-tags"));
const go = __importStar(require("./go"));
const gradle_version_1 = require("./gradle-version");
const helm_1 = require("./helm");
const hex_1 = require("./hex");
const jenkinsPlugins = __importStar(require("./jenkins-plugins"));
const maven = __importStar(require("./maven"));
const npm = __importStar(require("./npm"));
const nuget = __importStar(require("./nuget"));
const orb_1 = require("./orb");
const packagist = __importStar(require("./packagist"));
const pod = __importStar(require("./pod"));
const pypi_1 = require("./pypi");
const repology = __importStar(require("./repology"));
const ruby_version_1 = require("./ruby-version");
const rubygems = __importStar(require("./rubygems"));
const sbtPackage = __importStar(require("./sbt-package"));
const sbtPlugin = __importStar(require("./sbt-plugin"));
const terraform_module_1 = require("./terraform-module");
const terraform_provider_1 = require("./terraform-provider");
const api = new Map();
exports.default = api;
api.set(adoptium_java_1.AdoptiumJavaDatasource.id, new adoptium_java_1.AdoptiumJavaDatasource());
api.set('bitbucket-tags', new bitbucket_tags_1.BitBucketTagsDatasource());
api.set('cdnjs', new cdnjs_1.CdnJsDatasource());
api.set('clojure', new clojure_1.ClojureDatasource());
api.set('crate', crate);
api.set('dart', new dart_1.DartDatasource());
api.set('docker', docker);
api.set('galaxy', new galaxy_1.GalaxyDatasource());
api.set('galaxy-collection', new galaxy_collection_1.GalaxyCollectionDatasource());
api.set('git-refs', gitRefs);
api.set('git-tags', gitTags);
api.set('github-releases', githubReleases);
api.set('github-tags', githubTags);
api.set('gitlab-tags', gitlabTags);
api.set(gitlab_releases_1.GitlabReleasesDatasource.id, new gitlab_releases_1.GitlabReleasesDatasource());
api.set('go', go);
api.set('gradle-version', new gradle_version_1.GradleVersionDatasource());
api.set('helm', new helm_1.HelmDatasource());
api.set('hex', new hex_1.HexDatasource());
api.set('jenkins-plugins', jenkinsPlugins);
api.set('maven', maven);
api.set('npm', npm);
api.set('nuget', nuget);
api.set('orb', new orb_1.OrbDatasource());
api.set('packagist', packagist);
api.set('pod', pod);
api.set('pypi', new pypi_1.PypiDatasource());
api.set('repology', repology);
api.set('ruby-version', new ruby_version_1.RubyVersionDatasource());
api.set('rubygems', rubygems);
api.set('sbt-package', sbtPackage);
api.set('sbt-plugin', sbtPlugin);
api.set('terraform-module', new terraform_module_1.TerraformModuleDatasource());
api.set('terraform-provider', new terraform_provider_1.TerraformProviderDatasource());
//# sourceMappingURL=api.js.map