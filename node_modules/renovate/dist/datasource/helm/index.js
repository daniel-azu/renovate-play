"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelmDatasource = void 0;
const is_1 = __importDefault(require("@sindresorhus/is"));
const js_yaml_1 = require("js-yaml");
const logger_1 = require("../../logger");
const decorator_1 = require("../../util/cache/package/decorator");
const url_1 = require("../../util/url");
const datasource_1 = require("../datasource");
class HelmDatasource extends datasource_1.Datasource {
    constructor() {
        super(HelmDatasource.id);
        this.defaultRegistryUrls = ['https://charts.helm.sh/stable'];
        this.defaultConfig = {
            commitMessageTopic: 'Helm release {{depName}}',
            group: {
                commitMessageTopic: '{{{groupName}}} Helm releases',
            },
        };
    }
    async getRepositoryData(repository) {
        let res;
        try {
            res = await this.http.get('index.yaml', {
                baseUrl: (0, url_1.ensureTrailingSlash)(repository),
            });
            if (!res || !res.body) {
                logger_1.logger.warn(`Received invalid response from ${repository}`);
                return null;
            }
        }
        catch (err) {
            this.handleGenericErrors(err);
        }
        try {
            const doc = (0, js_yaml_1.load)(res.body, {
                json: true,
            });
            if (!is_1.default.plainObject(doc)) {
                logger_1.logger.warn(`Failed to parse index.yaml from ${repository}`);
                return null;
            }
            const result = {};
            for (const [name, releases] of Object.entries(doc.entries)) {
                result[name] = {
                    homepage: releases[0].home,
                    sourceUrl: releases[0].sources ? releases[0].sources[0] : undefined,
                    releases: releases.map((release) => ({
                        version: release.version,
                        releaseTimestamp: release.created ? release.created : null,
                    })),
                };
            }
            return result;
        }
        catch (err) {
            logger_1.logger.warn(`Failed to parse index.yaml from ${repository}`);
            logger_1.logger.debug(err);
            return null;
        }
    }
    async getReleases({ lookupName, registryUrl: helmRepository, }) {
        const repositoryData = await this.getRepositoryData(helmRepository);
        if (!repositoryData) {
            logger_1.logger.debug(`Couldn't get index.yaml file from ${helmRepository}`);
            return null;
        }
        const releases = repositoryData[lookupName];
        if (!releases) {
            logger_1.logger.debug({ dependency: lookupName }, `Entry ${lookupName} doesn't exist in index.yaml from ${helmRepository}`);
            return null;
        }
        return releases;
    }
}
HelmDatasource.id = 'helm';
__decorate([
    (0, decorator_1.cache)({
        namespace: `datasource-${HelmDatasource.id}`,
        key: (repository) => repository,
    })
], HelmDatasource.prototype, "getRepositoryData", null);
exports.HelmDatasource = HelmDatasource;
//# sourceMappingURL=index.js.map