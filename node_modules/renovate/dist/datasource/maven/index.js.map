{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/maven/index.ts"],"names":[],"mappings":"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","sourcesContent":["import url from 'url';\nimport pAll from 'p-all';\nimport { XmlDocument } from 'xmldoc';\nimport { logger } from '../../logger';\nimport * as packageCache from '../../util/cache/package';\nimport mavenVersion from '../../versioning/maven';\nimport * as mavenVersioning from '../../versioning/maven';\nimport { compare } from '../../versioning/maven/compare';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { MAVEN_REPO } from './common';\nimport type {\n  ArtifactInfoResult,\n  ArtifactsInfo,\n  MavenDependency,\n} from './types';\nimport {\n  downloadMavenXml,\n  getDependencyInfo,\n  getDependencyParts,\n  getMavenUrl,\n  isHttpResourceExists,\n} from './util';\n\nexport { id } from './common';\n\nexport const customRegistrySupport = true;\nexport const defaultRegistryUrls = [MAVEN_REPO];\nexport const defaultVersioning = mavenVersioning.id;\nexport const registryStrategy = 'merge';\n\nfunction isStableVersion(x: string): boolean {\n  return mavenVersion.isStable(x);\n}\n\nfunction getLatestStableVersion(releases: Release[]): string | null {\n  const stableVersions = releases\n    .map(({ version }) => version)\n    .filter(isStableVersion);\n  if (stableVersions.length) {\n    return stableVersions.reduce((latestVersion, version) =>\n      compare(version, latestVersion) === 1 ? version : latestVersion\n    );\n  }\n  return null;\n}\n\nfunction extractVersions(metadata: XmlDocument): string[] {\n  const versions = metadata.descendantWithPath('versioning.versions');\n  const elements = versions?.childrenNamed('version');\n  if (!elements) {\n    return [];\n  }\n  return elements.map((el) => el.val);\n}\n\nasync function getVersionsFromMetadata(\n  dependency: MavenDependency,\n  repoUrl: string\n): Promise<string[] | null> {\n  const metadataUrl = getMavenUrl(dependency, repoUrl, 'maven-metadata.xml');\n\n  const cacheNamespace = 'datasource-maven-metadata';\n  const cacheKey = metadataUrl.toString();\n  const cachedVersions = await packageCache.get<string[]>(\n    cacheNamespace,\n    cacheKey\n  );\n  /* istanbul ignore if */\n  if (cachedVersions) {\n    return cachedVersions;\n  }\n\n  const { authorization, xml: mavenMetadata } = await downloadMavenXml(\n    metadataUrl\n  );\n  if (!mavenMetadata) {\n    return null;\n  }\n\n  const versions = extractVersions(mavenMetadata);\n  if (!authorization) {\n    await packageCache.set(cacheNamespace, cacheKey, versions, 30);\n  }\n  return versions;\n}\n\n// istanbul ignore next\nfunction isValidArtifactsInfo(\n  info: ArtifactsInfo | null,\n  versions: string[]\n): boolean {\n  if (!info) {\n    return false;\n  }\n  return versions.every((v) => info[v] !== undefined);\n}\n\nasync function filterMissingArtifacts(\n  dependency: MavenDependency,\n  repoUrl: string,\n  versions: string[]\n): Promise<Release[]> {\n  const cacheNamespace = 'datasource-maven-metadata';\n  const cacheKey = `${repoUrl}${dependency.dependencyUrl}`;\n  let artifactsInfo: ArtifactsInfo | null =\n    await packageCache.get<ArtifactsInfo>(cacheNamespace, cacheKey);\n\n  if (!isValidArtifactsInfo(artifactsInfo, versions)) {\n    const queue = versions\n      .map((version): [string, url.URL | null] => {\n        const artifactUrl = getMavenUrl(\n          dependency,\n          repoUrl,\n          `${version}/${dependency.name}-${version}.pom`\n        );\n        return [version, artifactUrl];\n      })\n      .filter(([_, artifactUrl]) => Boolean(artifactUrl))\n      .map(\n        ([version, artifactUrl]) =>\n          async (): Promise<ArtifactInfoResult> =>\n            [version, await isHttpResourceExists(artifactUrl)]\n      );\n    const results = await pAll(queue, { concurrency: 5 });\n    artifactsInfo = results.reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [key]: value,\n      }),\n      {}\n    );\n\n    // Retry earlier for status other than 404\n    const cacheTTL = Object.values(artifactsInfo).some((x) => x === null)\n      ? 60\n      : 24 * 60;\n\n    await packageCache.set(cacheNamespace, cacheKey, artifactsInfo, cacheTTL);\n  }\n\n  return versions\n    .filter((v) => artifactsInfo[v])\n    .map((version) => {\n      const release: Release = { version };\n      const releaseTimestamp = artifactsInfo[version];\n      if (releaseTimestamp && typeof releaseTimestamp === 'string') {\n        release.releaseTimestamp = releaseTimestamp;\n      }\n      return release;\n    });\n}\n\nexport async function getReleases({\n  lookupName,\n  registryUrl,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const dependency = getDependencyParts(lookupName);\n  let releases: Release[] = null;\n  const repoForVersions = {};\n  const repoUrl = registryUrl.replace(/\\/?$/, '/');\n  logger.debug(`Looking up ${dependency.display} in repository ${repoUrl}`);\n  const metadataVersions = await getVersionsFromMetadata(dependency, repoUrl);\n  if (metadataVersions) {\n    if (!process.env.RENOVATE_EXPERIMENTAL_NO_MAVEN_POM_CHECK) {\n      releases = await filterMissingArtifacts(\n        dependency,\n        repoUrl,\n        metadataVersions\n      );\n    }\n\n    /* istanbul ignore next */\n    releases = releases || metadataVersions.map((version) => ({ version }));\n\n    const latestVersion = getLatestStableVersion(releases);\n    if (latestVersion) {\n      repoForVersions[latestVersion] = repoUrl;\n    }\n\n    logger.debug(`Found ${releases.length} new releases for ${dependency.display} in repository ${repoUrl}`); // prettier-ignore\n  }\n\n  if (!releases?.length) {\n    return null;\n  }\n\n  let dependencyInfo = {};\n  const latestVersion = getLatestStableVersion(releases);\n  if (latestVersion) {\n    dependencyInfo = await getDependencyInfo(\n      dependency,\n      repoForVersions[latestVersion],\n      latestVersion\n    );\n  }\n\n  return {\n    ...dependency,\n    ...dependencyInfo,\n    releases,\n  };\n}\n"]}