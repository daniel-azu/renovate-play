{"version":3,"file":"get.js","sourceRoot":"","sources":["../../../lib/datasource/npm/get.ts"],"names":[],"mappings":"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","sourcesContent":["import url from 'url';\nimport is from '@sindresorhus/is';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as packageCache from '../../util/cache/package';\nimport { Http, HttpOptions } from '../../util/http';\nimport { id } from './common';\nimport { resolvePackage } from './npmrc';\nimport type { NpmDependency, NpmRelease, NpmResponse } from './types';\n\nconst http = new Http(id);\n\nlet memcache: Record<string, string> = {};\n\nexport function resetMemCache(): void {\n  logger.debug('resetMemCache()');\n  memcache = {};\n}\n\nexport function resetCache(): void {\n  resetMemCache();\n}\n\nexport async function getDependency(\n  packageName: string\n): Promise<NpmDependency | null> {\n  logger.trace(`npm.getDependency(${packageName})`);\n\n  // This is our datastore cache and is cleared at the end of each repo, i.e. we never requery/revalidate during a \"run\"\n  if (memcache[packageName]) {\n    logger.trace('Returning cached result');\n    return JSON.parse(memcache[packageName]) as NpmDependency;\n  }\n\n  const { headers, packageUrl, registryUrl } = resolvePackage(packageName);\n\n  // Now check the persistent cache\n  const cacheNamespace = 'datasource-npm';\n  const cachedResult = await packageCache.get<NpmDependency>(\n    cacheNamespace,\n    packageUrl\n  );\n  // istanbul ignore if\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  const uri = url.parse(packageUrl);\n\n  if (uri.host === 'registry.npmjs.org' && !uri.pathname.startsWith('/@')) {\n    // Delete the authorization header for non-scoped public packages to improve http caching\n    // Otherwise, authenticated requests are not cacheable until the registry adds \"public\" to Cache-Control\n    // Ref: https://greenbytes.de/tech/webdav/rfc7234.html#caching.authenticated.responses\n    delete headers.authorization;\n  }\n\n  try {\n    const opts: HttpOptions = {\n      headers,\n    };\n    const raw = await http.getJson<NpmResponse>(packageUrl, opts);\n    const res = raw.body;\n    if (!res.versions || !Object.keys(res.versions).length) {\n      // Registry returned a 200 OK but with no versions\n      logger.debug({ dependency: packageName }, 'No versions returned');\n      return null;\n    }\n\n    const latestVersion = res.versions[res['dist-tags'].latest];\n    res.repository = res.repository || latestVersion.repository;\n    res.homepage = res.homepage || latestVersion.homepage;\n\n    // Determine repository URL\n    let sourceUrl: string;\n\n    if (res.repository) {\n      if (is.string(res.repository)) {\n        sourceUrl = res.repository;\n      } else if (res.repository.url) {\n        sourceUrl = res.repository.url;\n      }\n    }\n    // Simplify response before caching and returning\n    const dep: NpmDependency = {\n      name: res.name,\n      homepage: res.homepage,\n      sourceUrl,\n      versions: {},\n      releases: null,\n      'dist-tags': res['dist-tags'],\n      registryUrl,\n    };\n    if (res.repository?.directory) {\n      dep.sourceDirectory = res.repository.directory;\n    }\n    if (latestVersion.deprecated) {\n      dep.deprecationMessage = `On registry \\`${registryUrl}\\`, the \"latest\" version of dependency \\`${packageName}\\` has the following deprecation notice:\\n\\n\\`${latestVersion.deprecated}\\`\\n\\nMarking the latest version of an npm package as deprecated results in the entire package being considered deprecated, so contact the package author you think this is a mistake.`;\n      dep.deprecationSource = id;\n    }\n    dep.releases = Object.keys(res.versions).map((version) => {\n      const release: NpmRelease = {\n        version,\n        gitRef: res.versions[version].gitHead,\n        dependencies: res.versions[version].dependencies,\n        devDependencies: res.versions[version].devDependencies,\n      };\n      if (res.time?.[version]) {\n        release.releaseTimestamp = res.time[version];\n      }\n      if (res.versions[version].deprecated) {\n        release.isDeprecated = true;\n      }\n      return release;\n    });\n    logger.trace({ dep }, 'dep');\n    // serialize first before saving\n    memcache[packageName] = JSON.stringify(dep);\n    const cacheMinutes = process.env.RENOVATE_CACHE_NPM_MINUTES\n      ? parseInt(process.env.RENOVATE_CACHE_NPM_MINUTES, 10)\n      : 15;\n    // TODO: use dynamic detection of public repos instead of a static list (#9587)\n    const whitelistedPublicScopes = [\n      '@graphql-codegen',\n      '@storybook',\n      '@types',\n      '@typescript-eslint',\n    ];\n    if (\n      !raw.authorization &&\n      (whitelistedPublicScopes.includes(packageName.split('/')[0]) ||\n        !packageName.startsWith('@'))\n    ) {\n      await packageCache.set(cacheNamespace, packageUrl, dep, cacheMinutes);\n    }\n    return dep;\n  } catch (err) {\n    if (err.statusCode === 401 || err.statusCode === 403) {\n      logger.debug(\n        {\n          packageUrl,\n          err,\n          statusCode: err.statusCode,\n          packageName,\n        },\n        `Dependency lookup failure: unauthorized`\n      );\n      return null;\n    }\n    if (err.statusCode === 402) {\n      logger.debug(\n        {\n          packageUrl,\n          err,\n          statusCode: err.statusCode,\n          packageName,\n        },\n        `Dependency lookup failure: payent required`\n      );\n      return null;\n    }\n    if (err.statusCode === 404 || err.code === 'ENOTFOUND') {\n      logger.debug(\n        { err, packageName },\n        `Dependency lookup failure: not found`\n      );\n      return null;\n    }\n    if (uri.host === 'registry.npmjs.org') {\n      // istanbul ignore if\n      if (err.name === 'ParseError' && err.body) {\n        err.body = 'err.body deleted by Renovate';\n      }\n      throw new ExternalHostError(err);\n    }\n    return null;\n  }\n}\n"]}