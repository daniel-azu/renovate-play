{"version":3,"file":"get.js","sourceRoot":"","sources":["../../../lib/datasource/rubygems/get.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../../logger';\nimport { HttpError } from '../../util/http/types';\nimport type { Release, ReleaseResult } from '../types';\nimport { fetchBuffer, fetchJson } from './common';\nimport type {\n  JsonGemVersions,\n  JsonGemsInfo,\n  MarshalledVersionInfo,\n} from './types';\n\nconst INFO_PATH = '/api/v1/gems';\nconst VERSIONS_PATH = '/api/v1/versions';\nconst DEPENDENCIES_PATH = '/api/v1/dependencies';\n\nexport async function getDependencyFallback(\n  dependency: string,\n  registry: string\n): Promise<ReleaseResult | null> {\n  logger.debug(\n    { dependency, api: DEPENDENCIES_PATH },\n    'RubyGems lookup for dependency'\n  );\n  const info = await fetchBuffer<MarshalledVersionInfo[]>(\n    dependency,\n    registry,\n    DEPENDENCIES_PATH\n  );\n  if (!info || info.length === 0) {\n    return null;\n  }\n  const releases = info.map(({ number: version, platform: rubyPlatform }) => ({\n    version,\n    rubyPlatform,\n  }));\n  return {\n    releases,\n    homepage: null,\n    sourceUrl: null,\n    changelogUrl: null,\n  };\n}\n\nexport async function getDependency(\n  dependency: string,\n  registry: string\n): Promise<ReleaseResult | null> {\n  logger.debug(\n    { dependency, api: INFO_PATH },\n    'RubyGems lookup for dependency'\n  );\n  let info: JsonGemsInfo;\n\n  try {\n    info = await fetchJson(dependency, registry, INFO_PATH);\n  } catch (error) {\n    // fallback to deps api on 404\n    if (error instanceof HttpError && error.response?.statusCode === 404) {\n      return await getDependencyFallback(dependency, registry);\n    }\n    throw error;\n  }\n\n  if (!info) {\n    logger.debug({ dependency }, 'RubyGems package not found.');\n    return null;\n  }\n\n  if (dependency.toLowerCase() !== info.name.toLowerCase()) {\n    logger.warn(\n      { lookup: dependency, returned: info.name },\n      'Lookup name does not match with returned.'\n    );\n    return null;\n  }\n\n  let versions: JsonGemVersions[] = [];\n  let releases: Release[] = [];\n  try {\n    versions = await fetchJson(dependency, registry, VERSIONS_PATH);\n  } catch (err) {\n    if (err.statusCode === 400 || err.statusCode === 404) {\n      logger.debug(\n        { registry },\n        'versions endpoint returns error - falling back to info endpoint'\n      );\n    } else {\n      throw err;\n    }\n  }\n\n  // TODO: invalid properties for `Release` see #11312\n\n  if (versions.length === 0 && info.version) {\n    logger.warn('falling back to the version from the info endpoint');\n    releases = [\n      {\n        version: info.version,\n        rubyPlatform: info.platform,\n      } as Release,\n    ];\n  } else {\n    releases = versions.map(\n      ({\n        number: version,\n        platform: rubyPlatform,\n        created_at: releaseTimestamp,\n        rubygems_version: rubygemsVersion,\n        ruby_version: rubyVersion,\n      }) => ({\n        version,\n        rubyPlatform,\n        releaseTimestamp,\n        rubygemsVersion,\n        rubyVersion,\n      })\n    );\n  }\n\n  return {\n    releases,\n    homepage: info.homepage_uri,\n    sourceUrl: info.source_code_uri,\n    changelogUrl: info.changelog_uri,\n  };\n}\n"]}