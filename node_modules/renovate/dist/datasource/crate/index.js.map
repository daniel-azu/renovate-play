{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/crate/index.ts"],"names":[],"mappings":"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","sourcesContent":["import hasha from 'hasha';\nimport Git from 'simple-git';\nimport { join } from 'upath';\nimport { getGlobalConfig } from '../../config/global';\nimport { logger } from '../../logger';\nimport { ExternalHostError } from '../../types/errors/external-host-error';\nimport * as memCache from '../../util/cache/memory';\nimport * as packageCache from '../../util/cache/package';\nimport { privateCacheDir, readFile } from '../../util/fs';\nimport { Http } from '../../util/http';\nimport * as cargoVersioning from '../../versioning/cargo';\nimport type { GetReleasesConfig, Release, ReleaseResult } from '../types';\nimport { CrateRecord, RegistryFlavor, RegistryInfo } from './types';\n\nexport const id = 'crate';\nexport const customRegistrySupport = true;\nexport const defaultRegistryUrls = ['https://crates.io'];\nexport const defaultVersioning = cargoVersioning.id;\nexport const registryStrategy = 'first';\n\nconst http = new Http(id);\n\nconst CRATES_IO_BASE_URL =\n  'https://raw.githubusercontent.com/rust-lang/crates.io-index/master/';\n\nexport function getIndexSuffix(lookupName: string): string[] {\n  const len = lookupName.length;\n\n  if (len === 1) {\n    return ['1', lookupName];\n  }\n  if (len === 2) {\n    return ['2', lookupName];\n  }\n  if (len === 3) {\n    return ['3', lookupName[0], lookupName];\n  }\n\n  return [lookupName.slice(0, 2), lookupName.slice(2, 4), lookupName];\n}\n\nexport async function fetchCrateRecordsPayload(\n  info: RegistryInfo,\n  lookupName: string\n): Promise<string> {\n  if (info.clonePath) {\n    const path = join(info.clonePath, ...getIndexSuffix(lookupName));\n    return readFile(path, 'utf8');\n  }\n\n  if (info.flavor === RegistryFlavor.CratesIo) {\n    const crateUrl = CRATES_IO_BASE_URL + getIndexSuffix(lookupName).join('/');\n    try {\n      return (await http.get(crateUrl)).body;\n    } catch (err) {\n      if (\n        err.statusCode === 429 ||\n        (err.statusCode >= 500 && err.statusCode < 600)\n      ) {\n        throw new ExternalHostError(err);\n      }\n\n      throw err;\n    }\n  }\n\n  throw new Error(`unsupported crate registry flavor: ${info.flavor}`);\n}\n\n/**\n * Computes the dependency URL for a crate, given\n * registry information\n */\nfunction getDependencyUrl(info: RegistryInfo, lookupName: string): string {\n  switch (info.flavor) {\n    case RegistryFlavor.CratesIo:\n      return `https://crates.io/crates/${lookupName}`;\n    case RegistryFlavor.Cloudsmith: {\n      // input: https://dl.cloudsmith.io/basic/$org/$repo/cargo/index.git\n      const tokens = info.url.pathname.split('/');\n      const org = tokens[2];\n      const repo = tokens[3];\n      return `https://cloudsmith.io/~${org}/repos/${repo}/packages/detail/cargo/${lookupName}`;\n    }\n    default:\n      return `${info.rawUrl}/${lookupName}`;\n  }\n}\n\n/**\n * Given a Git URL, computes a semi-human-readable name for a folder in which to\n * clone the repository.\n */\nfunction cacheDirFromUrl(url: URL): string {\n  const proto = url.protocol.replace(/:$/, '');\n  const host = url.hostname;\n  const hash = hasha(url.pathname, {\n    algorithm: 'sha256',\n  }).substr(0, 7);\n\n  return `crate-registry-${proto}-${host}-${hash}`;\n}\n\n/**\n * Fetches information about a registry, by url.\n * If no url is given, assumes crates.io.\n * If an url is given, assumes it's a valid Git repository\n * url and clones it to cache.\n */\nasync function fetchRegistryInfo(\n  config: GetReleasesConfig,\n  registryUrl: string\n): Promise<RegistryInfo | null> {\n  let url: URL;\n  try {\n    url = new URL(registryUrl);\n  } catch (err) {\n    logger.debug({ registryUrl }, 'could not parse registry URL');\n    return null;\n  }\n\n  let flavor: RegistryFlavor;\n  if (url.hostname === 'crates.io') {\n    flavor = RegistryFlavor.CratesIo;\n  } else if (url.hostname === 'dl.cloudsmith.io') {\n    flavor = RegistryFlavor.Cloudsmith;\n  } else {\n    flavor = RegistryFlavor.Other;\n  }\n\n  const registry: RegistryInfo = {\n    flavor,\n    rawUrl: registryUrl,\n    url,\n  };\n\n  if (flavor !== RegistryFlavor.CratesIo) {\n    if (!getGlobalConfig().allowCustomCrateRegistries) {\n      logger.warn(\n        'crate datasource: allowCustomCrateRegistries=true is required for registries other than crates.io, bailing out'\n      );\n      return null;\n    }\n\n    const cacheKey = `crate-datasource/registry-clone-path/${registryUrl}`;\n    const cacheKeyForError = `crate-datasource/registry-clone-path/${registryUrl}/error`;\n\n    // We need to ensure we don't run `git clone` in parallel. Therefore we store\n    // a promise of the running operation in the mem cache, which in the end resolves\n    // to the file path of the cloned repository.\n\n    const clonePathPromise: Promise<string> | null = memCache.get(cacheKey);\n    let clonePath: string;\n\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    if (clonePathPromise) {\n      clonePath = await clonePathPromise;\n    } else {\n      clonePath = join(privateCacheDir(), cacheDirFromUrl(url));\n      logger.info({ clonePath, registryUrl }, `Cloning private cargo registry`);\n\n      const git = Git();\n      const clonePromise = git.clone(registryUrl, clonePath, {\n        '--depth': 1,\n      });\n\n      memCache.set(\n        cacheKey,\n        clonePromise.then(() => clonePath).catch(() => null)\n      );\n\n      try {\n        await clonePromise;\n      } catch (err) {\n        logger.warn(\n          { err, lookupName: config.lookupName, registryUrl },\n          'failed cloning git registry'\n        );\n        memCache.set(cacheKeyForError, err);\n\n        return null;\n      }\n    }\n\n    if (!clonePath) {\n      const err = memCache.get(cacheKeyForError);\n      logger.warn(\n        { err, lookupName: config.lookupName, registryUrl },\n        'Previous git clone failed, bailing out.'\n      );\n\n      return null;\n    }\n\n    registry.clonePath = clonePath;\n  }\n\n  return registry;\n}\n\nexport function areReleasesCacheable(registryUrl: string): boolean {\n  // We only cache public releases, we don't want to cache private\n  // cloned data between runs.\n  return registryUrl === 'https://crates.io';\n}\n\nexport async function getReleases(\n  config: GetReleasesConfig\n): Promise<ReleaseResult | null> {\n  const { lookupName, registryUrl } = config;\n\n  // istanbul ignore if\n  if (!registryUrl) {\n    logger.warn(\n      'crate datasource: No registryUrl specified, cannot perform getReleases'\n    );\n    return null;\n  }\n\n  const cacheable = areReleasesCacheable(registryUrl);\n  const cacheNamespace = 'datasource-crate';\n  const cacheKey = `${registryUrl}/${lookupName}`;\n\n  if (cacheable) {\n    const cachedResult = await packageCache.get<ReleaseResult>(\n      cacheNamespace,\n      cacheKey\n    );\n    // istanbul ignore if\n    if (cachedResult) {\n      logger.debug({ cacheKey }, 'Returning cached resource');\n      return cachedResult;\n    }\n  }\n\n  const registryInfo = await fetchRegistryInfo(config, registryUrl);\n  if (!registryInfo) {\n    logger.debug({ registryUrl }, 'Could not fetch registry info');\n    return null;\n  }\n\n  const dependencyUrl = getDependencyUrl(registryInfo, lookupName);\n\n  const payload = await fetchCrateRecordsPayload(registryInfo, lookupName);\n  const lines = payload\n    .split('\\n') // break into lines\n    .map((line) => line.trim()) // remove whitespace\n    .filter((line) => line.length !== 0) // remove empty lines\n    .map((line) => JSON.parse(line) as CrateRecord); // parse\n  const result: ReleaseResult = {\n    dependencyUrl,\n    releases: [],\n  };\n  result.releases = lines\n    .map((version) => {\n      const release: Release = {\n        version: version.vers,\n      };\n      if (version.yanked) {\n        release.isDeprecated = true;\n      }\n      return release;\n    })\n    .filter((release) => release.version);\n  if (!result.releases.length) {\n    return null;\n  }\n\n  if (cacheable) {\n    const cacheMinutes = 10;\n    await packageCache.set(cacheNamespace, cacheKey, result, cacheMinutes);\n  }\n\n  return result;\n}\n"]}