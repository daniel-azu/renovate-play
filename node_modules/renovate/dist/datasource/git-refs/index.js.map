{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/git-refs/index.ts"],"names":[],"mappings":"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","sourcesContent":["import simpleGit from 'simple-git';\nimport * as packageCache from '../../util/cache/package';\nimport { getRemoteUrlWithToken } from '../../util/git/url';\nimport * as semver from '../../versioning/semver';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport type { RawRefs } from './types';\n\nexport const id = 'git-refs';\nexport const customRegistrySupport = false;\n\nconst cacheMinutes = 10;\n\n// git will prompt for known hosts or passwords, unless we activate BatchMode\nprocess.env.GIT_SSH_COMMAND = 'ssh -o BatchMode=yes';\n\nexport async function getRawRefs(\n  { lookupName }: GetReleasesConfig,\n  hostType: string\n): Promise<RawRefs[] | null> {\n  const git = simpleGit();\n  const cacheNamespace = 'git-raw-refs';\n\n  const cachedResult = await packageCache.get<RawRefs[]>(\n    cacheNamespace,\n    lookupName\n  );\n  /* istanbul ignore next line */\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  // fetch remote tags\n  const lsRemote = await git.listRemote([\n    getRemoteUrlWithToken(lookupName, hostType),\n  ]);\n  if (!lsRemote) {\n    return null;\n  }\n\n  const refMatch = /(?<hash>.*?)\\s+refs\\/(?<type>.*?)\\/(?<value>.*)/;\n  const headMatch = /(?<hash>.*?)\\s+HEAD/;\n\n  const refs = lsRemote\n    .trim()\n    .split('\\n')\n    .map((line) => line.trim())\n    .map((line) => {\n      let match = refMatch.exec(line);\n      if (match) {\n        return {\n          type: match.groups.type,\n          value: match.groups.value,\n          hash: match.groups.hash,\n        };\n      }\n      match = headMatch.exec(line);\n      if (match) {\n        return {\n          type: '',\n          value: 'HEAD',\n          hash: match.groups.hash,\n        };\n      }\n      // istanbul ignore next\n      return null;\n    })\n    .filter(Boolean)\n    .filter((ref) => ref.type !== 'pull' && !ref.value.endsWith('^{}'));\n  await packageCache.set(cacheNamespace, lookupName, refs, cacheMinutes);\n  return refs;\n}\n\nexport async function getReleases({\n  lookupName,\n}: GetReleasesConfig): Promise<ReleaseResult | null> {\n  const rawRefs: RawRefs[] = await getRawRefs({ lookupName }, id);\n\n  const refs = rawRefs\n    .filter((ref) => ref.type === 'tags' || ref.type === 'heads')\n    .map((ref) => ref.value)\n    .filter((ref) => semver.isVersion(ref));\n\n  const uniqueRefs = [...new Set(refs)];\n\n  const sourceUrl = lookupName.replace(/\\.git$/, '').replace(/\\/$/, '');\n\n  const result: ReleaseResult = {\n    sourceUrl,\n    releases: uniqueRefs.map((ref) => ({\n      version: ref,\n      gitRef: ref,\n      newDigest: rawRefs.find((rawRef) => rawRef.value === ref).hash,\n    })),\n  };\n\n  return result;\n}\n\nexport async function getDigest(\n  { lookupName }: Partial<DigestConfig>,\n  newValue?: string\n): Promise<string | null> {\n  const rawRefs: RawRefs[] = await getRawRefs({ lookupName }, id);\n  const findValue = newValue || 'HEAD';\n  const ref = rawRefs.find((rawRef) => rawRef.value === findValue);\n  if (ref) {\n    return ref.hash;\n  }\n  return null;\n}\n"]}