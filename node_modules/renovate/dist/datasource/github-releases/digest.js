"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapDigestAssetToRelease = exports.findDigestAsset = void 0;
const hasha_1 = __importDefault(require("hasha"));
const packageCache = __importStar(require("../../util/cache/package"));
const common_1 = require("./common");
async function findDigestFile(release, digest) {
    const smallAssets = release.assets.filter((a) => a.size < 5 * 1024);
    for (const asset of smallAssets) {
        const res = await common_1.http.get(asset.browser_download_url);
        for (const line of res.body.split('\n')) {
            const [lineDigest, lineFn] = line.split(/\s+/, 2);
            if (lineDigest === digest) {
                return {
                    assetName: asset.name,
                    digestedFileName: lineFn,
                    currentVersion: release.tag_name,
                    currentDigest: lineDigest,
                };
            }
        }
    }
    return null;
}
function inferHashAlg(digest) {
    switch (digest.length) {
        case 64:
            return 'sha256';
        default:
        case 96:
            return 'sha512';
    }
}
function getAssetDigestCacheKey(downloadUrl, algorithm) {
    const type = 'assetDigest';
    return `${downloadUrl}:${algorithm}:${type}`;
}
async function downloadAndDigest(asset, algorithm) {
    const downloadUrl = asset.browser_download_url;
    const cacheKey = getAssetDigestCacheKey(downloadUrl, algorithm);
    const cachedResult = await packageCache.get(common_1.cacheNamespace, cacheKey);
    // istanbul ignore if
    if (cachedResult) {
        return cachedResult;
    }
    const res = common_1.http.stream(downloadUrl);
    const digest = await hasha_1.default.fromStream(res, { algorithm });
    const cacheMinutes = 1440;
    await packageCache.set(common_1.cacheNamespace, cacheKey, digest, cacheMinutes);
    return digest;
}
async function findAssetWithDigest(release, digest) {
    const algorithm = inferHashAlg(digest);
    const assetsBySize = release.assets.sort((a, b) => {
        if (a.size < b.size) {
            return -1;
        }
        if (a.size > b.size) {
            return 1;
        }
        return 0;
    });
    for (const asset of assetsBySize) {
        const assetDigest = await downloadAndDigest(asset, algorithm);
        if (assetDigest === digest) {
            return {
                assetName: asset.name,
                currentVersion: release.tag_name,
                currentDigest: assetDigest,
            };
        }
    }
    return null;
}
/** Identify the asset associated with a known digest. */
async function findDigestAsset(release, digest) {
    const digestFile = await findDigestFile(release, digest);
    if (digestFile) {
        return digestFile;
    }
    const asset = await findAssetWithDigest(release, digest);
    return asset;
}
exports.findDigestAsset = findDigestAsset;
/** Given a digest asset, find the equivalent digest in a different release. */
async function mapDigestAssetToRelease(digestAsset, release) {
    const current = digestAsset.currentVersion.replace(/^v/, '');
    const next = release.tag_name.replace(/^v/, '');
    const releaseChecksumAssetName = digestAsset.assetName.replace(current, next);
    const releaseAsset = release.assets.find((a) => a.name === releaseChecksumAssetName);
    if (!releaseAsset) {
        return null;
    }
    if (digestAsset.digestedFileName) {
        const releaseFilename = digestAsset.digestedFileName.replace(current, next);
        const res = await common_1.http.get(releaseAsset.browser_download_url);
        for (const line of res.body.split('\n')) {
            const [lineDigest, lineFn] = line.split(/\s+/, 2);
            if (lineFn === releaseFilename) {
                return lineDigest;
            }
        }
    }
    else {
        const algorithm = inferHashAlg(digestAsset.currentDigest);
        const newDigest = await downloadAndDigest(releaseAsset, algorithm);
        return newDigest;
    }
    return null;
}
exports.mapDigestAssetToRelease = mapDigestAssetToRelease;
//# sourceMappingURL=digest.js.map