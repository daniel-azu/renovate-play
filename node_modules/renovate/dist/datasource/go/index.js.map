{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/datasource/go/index.ts"],"names":[],"mappings":"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","sourcesContent":["import URL from 'url';\nimport { PLATFORM_TYPE_GITLAB } from '../../constants/platforms';\nimport { logger } from '../../logger';\nimport * as hostRules from '../../util/host-rules';\nimport { regEx } from '../../util/regex';\nimport { trimTrailingSlash } from '../../util/url';\nimport { BitBucketTagsDatasource } from '../bitbucket-tags';\nimport * as github from '../github-tags';\nimport * as gitlab from '../gitlab-tags';\nimport type { DigestConfig, GetReleasesConfig, ReleaseResult } from '../types';\nimport { http } from './common';\nimport * as goproxy from './goproxy';\nimport type { DataSource } from './types';\n\nexport { id } from './common';\n\nexport const customRegistrySupport = false;\n\nconst gitlabRegExp = /^(https:\\/\\/[^/]*gitlab\\.[^/]*)\\/(.*)$/;\nconst bitbucket = new BitBucketTagsDatasource();\n\nasync function getDatasource(goModule: string): Promise<DataSource | null> {\n  if (goModule.startsWith('gopkg.in/')) {\n    const [pkg] = goModule.replace('gopkg.in/', '').split('.');\n    if (pkg.includes('/')) {\n      return { datasource: github.id, lookupName: pkg };\n    }\n    return {\n      datasource: github.id,\n      lookupName: `go-${pkg}/${pkg}`,\n    };\n  }\n  if (goModule.startsWith('github.com/')) {\n    const split = goModule.split('/');\n    const lookupName = split[1] + '/' + split[2];\n    return {\n      datasource: github.id,\n      lookupName,\n    };\n  }\n\n  if (goModule.startsWith('bitbucket.org/')) {\n    const split = goModule.split('/');\n    const lookupName = split[1] + '/' + split[2];\n    return {\n      datasource: bitbucket.id,\n      lookupName,\n    };\n  }\n\n  const pkgUrl = `https://${goModule}?go-get=1`;\n  const res = (await http.get(pkgUrl)).body;\n  const sourceMatch = regEx(\n    `<meta\\\\s+name=\"go-source\"\\\\s+content=\"([^\\\\s]+)\\\\s+([^\\\\s]+)`\n  ).exec(res);\n  if (sourceMatch) {\n    const [, prefix, goSourceUrl] = sourceMatch;\n    if (!goModule.startsWith(prefix)) {\n      logger.trace({ goModule }, 'go-source header prefix not match');\n      return null;\n    }\n    logger.debug({ goModule, goSourceUrl }, 'Go lookup source url');\n    if (goSourceUrl?.startsWith('https://github.com/')) {\n      return {\n        datasource: github.id,\n        lookupName: goSourceUrl\n          .replace('https://github.com/', '')\n          .replace(/\\/$/, ''),\n      };\n    }\n    const gitlabRes = gitlabRegExp.exec(goSourceUrl);\n    if (gitlabRes) {\n      return {\n        datasource: gitlab.id,\n        registryUrl: gitlabRes[1],\n        lookupName: gitlabRes[2].replace(/\\/$/, ''),\n      };\n    }\n\n    const opts = hostRules.find({\n      hostType: PLATFORM_TYPE_GITLAB,\n      url: goSourceUrl,\n    });\n    if (opts.token) {\n      // get server base url from import url\n      const parsedUrl = URL.parse(goSourceUrl);\n\n      // split the go module from the URL: host/go/module -> go/module\n      const split = goModule.split('/');\n      const lookupName = split[1] + '/' + split[2];\n\n      const registryUrl = `${parsedUrl.protocol}//${parsedUrl.host}`;\n\n      return {\n        datasource: gitlab.id,\n        registryUrl,\n        lookupName,\n      };\n    }\n  } else {\n    // GitHub Enterprise only returns a go-import meta\n    const importMatch = regEx(\n      `<meta\\\\s+name=\"go-import\"\\\\s+content=\"([^\\\\s]+)\\\\s+([^\\\\s]+)\\\\s+([^\\\\s]+)\">`\n    ).exec(res);\n    if (importMatch) {\n      const [, prefix, , goImportURL] = importMatch;\n      if (!goModule.startsWith(prefix)) {\n        logger.trace({ goModule }, 'go-import header prefix not match');\n        return null;\n      }\n      logger.debug({ goModule, goImportURL }, 'Go lookup import url');\n\n      // get server base url from import url\n      const parsedUrl = URL.parse(goImportURL);\n\n      // split the go module from the URL: host/go/module -> go/module\n      const lookupName = trimTrailingSlash(parsedUrl.pathname)\n        .replace(/\\.git$/, '')\n        .split('/')\n        .slice(-2)\n        .join('/');\n\n      return {\n        datasource: github.id,\n        registryUrl: `${parsedUrl.protocol}//${parsedUrl.host}`,\n        lookupName,\n      };\n    }\n\n    logger.trace({ goModule }, 'No go-source or go-import header found');\n  }\n  return null;\n}\n\n/**\n * go.getReleases\n *\n * This datasource resolves a go module URL into its source repository\n *  and then fetch it if it is on GitHub.\n *\n * This function will:\n *  - Determine the source URL for the module\n *  - Call the respective getReleases in github/gitlab to retrieve the tags\n *  - Filter module tags according to the module path\n */\nexport async function getReleases(\n  config: GetReleasesConfig\n): Promise<ReleaseResult | null> {\n  const { lookupName } = config;\n\n  let res: ReleaseResult = null;\n\n  logger.trace(`goproxy.getReleases(${lookupName})`);\n  res = await goproxy.getReleases(config);\n  if (res) {\n    return res;\n  }\n\n  logger.trace(`go.getReleases(${lookupName})`);\n  const source = await getDatasource(lookupName);\n\n  if (!source) {\n    logger.info(\n      { lookupName },\n      'Unsupported go host - cannot look up versions'\n    );\n    return null;\n  }\n\n  switch (source.datasource) {\n    case github.id: {\n      res = await github.getReleases(source);\n      break;\n    }\n    case gitlab.id: {\n      res = await gitlab.getReleases(source);\n      break;\n    }\n    case bitbucket.id: {\n      res = await bitbucket.getReleases(source);\n      break;\n    }\n    /* istanbul ignore next: can never happen, makes lint happy */\n    default: {\n      return null;\n    }\n  }\n\n  // istanbul ignore if\n  if (!res) {\n    return null;\n  }\n\n  /**\n   * github.com/org/mod/submodule should be tagged as submodule/va.b.c\n   * and that tag should be used instead of just va.b.c, although for compatibility\n   * the old behaviour stays the same.\n   */\n  const nameParts = lookupName.replace(/\\/v\\d+$/, '').split('/');\n  logger.trace({ nameParts, releases: res.releases }, 'go.getReleases');\n\n  // If it has more than 3 parts it's a submodule\n  if (nameParts.length > 3) {\n    const prefix = nameParts.slice(3, nameParts.length).join('/');\n    logger.trace(`go.getReleases.prefix:${prefix}`);\n\n    // Filter the releases so that we only get the ones that are for this submodule\n    // Also trim the submodule prefix from the version number\n    const submodReleases = res.releases\n      .filter((release) => release.version?.startsWith(prefix))\n      .map((release) => {\n        const r2 = release;\n        r2.version = r2.version.replace(`${prefix}/`, '');\n        return r2;\n      });\n    logger.trace({ submodReleases }, 'go.getReleases');\n\n    return {\n      sourceUrl: res.sourceUrl,\n      releases: submodReleases,\n    };\n  }\n\n  if (res.releases) {\n    res.releases = res.releases.filter((release) =>\n      release.version?.startsWith('v')\n    );\n  }\n\n  return res;\n}\n\n/**\n * go.getDigest\n *\n * This datasource resolves a go module URL into its source repository\n *  and then fetches the digest it if it is on GitHub.\n *\n * This function will:\n *  - Determine the source URL for the module\n *  - Call the respective getDigest in github to retrieve the commit hash\n */\nexport async function getDigest(\n  { lookupName }: Partial<DigestConfig>,\n  value?: string\n): Promise<string | null> {\n  const source = await getDatasource(lookupName);\n  if (!source) {\n    return null;\n  }\n\n  // ignore v0.0.0- pseudo versions that are used Go Modules - look up default branch instead\n  const tag = value && !value.startsWith('v0.0.0-2') ? value : undefined;\n\n  switch (source.datasource) {\n    case github.id: {\n      return github.getDigest(source, tag);\n    }\n    case bitbucket.id: {\n      return bitbucket.getDigest(source, tag);\n    }\n    /* istanbul ignore next: can never happen, makes lint happy */\n    default: {\n      return null;\n    }\n  }\n}\n"]}