"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDigest = exports.getReleases = exports.customRegistrySupport = exports.id = void 0;
const url_1 = __importDefault(require("url"));
const platforms_1 = require("../../constants/platforms");
const logger_1 = require("../../logger");
const hostRules = __importStar(require("../../util/host-rules"));
const regex_1 = require("../../util/regex");
const url_2 = require("../../util/url");
const bitbucket_tags_1 = require("../bitbucket-tags");
const github = __importStar(require("../github-tags"));
const gitlab = __importStar(require("../gitlab-tags"));
const common_1 = require("./common");
const goproxy = __importStar(require("./goproxy"));
var common_2 = require("./common");
Object.defineProperty(exports, "id", { enumerable: true, get: function () { return common_2.id; } });
exports.customRegistrySupport = false;
const gitlabRegExp = /^(https:\/\/[^/]*gitlab\.[^/]*)\/(.*)$/;
const bitbucket = new bitbucket_tags_1.BitBucketTagsDatasource();
async function getDatasource(goModule) {
    if (goModule.startsWith('gopkg.in/')) {
        const [pkg] = goModule.replace('gopkg.in/', '').split('.');
        if (pkg.includes('/')) {
            return { datasource: github.id, lookupName: pkg };
        }
        return {
            datasource: github.id,
            lookupName: `go-${pkg}/${pkg}`,
        };
    }
    if (goModule.startsWith('github.com/')) {
        const split = goModule.split('/');
        const lookupName = split[1] + '/' + split[2];
        return {
            datasource: github.id,
            lookupName,
        };
    }
    if (goModule.startsWith('bitbucket.org/')) {
        const split = goModule.split('/');
        const lookupName = split[1] + '/' + split[2];
        return {
            datasource: bitbucket.id,
            lookupName,
        };
    }
    const pkgUrl = `https://${goModule}?go-get=1`;
    const res = (await common_1.http.get(pkgUrl)).body;
    const sourceMatch = (0, regex_1.regEx)(`<meta\\s+name="go-source"\\s+content="([^\\s]+)\\s+([^\\s]+)`).exec(res);
    if (sourceMatch) {
        const [, prefix, goSourceUrl] = sourceMatch;
        if (!goModule.startsWith(prefix)) {
            logger_1.logger.trace({ goModule }, 'go-source header prefix not match');
            return null;
        }
        logger_1.logger.debug({ goModule, goSourceUrl }, 'Go lookup source url');
        if (goSourceUrl === null || goSourceUrl === void 0 ? void 0 : goSourceUrl.startsWith('https://github.com/')) {
            return {
                datasource: github.id,
                lookupName: goSourceUrl
                    .replace('https://github.com/', '')
                    .replace(/\/$/, ''),
            };
        }
        const gitlabRes = gitlabRegExp.exec(goSourceUrl);
        if (gitlabRes) {
            return {
                datasource: gitlab.id,
                registryUrl: gitlabRes[1],
                lookupName: gitlabRes[2].replace(/\/$/, ''),
            };
        }
        const opts = hostRules.find({
            hostType: platforms_1.PLATFORM_TYPE_GITLAB,
            url: goSourceUrl,
        });
        if (opts.token) {
            // get server base url from import url
            const parsedUrl = url_1.default.parse(goSourceUrl);
            // split the go module from the URL: host/go/module -> go/module
            const split = goModule.split('/');
            const lookupName = split[1] + '/' + split[2];
            const registryUrl = `${parsedUrl.protocol}//${parsedUrl.host}`;
            return {
                datasource: gitlab.id,
                registryUrl,
                lookupName,
            };
        }
    }
    else {
        // GitHub Enterprise only returns a go-import meta
        const importMatch = (0, regex_1.regEx)(`<meta\\s+name="go-import"\\s+content="([^\\s]+)\\s+([^\\s]+)\\s+([^\\s]+)">`).exec(res);
        if (importMatch) {
            const [, prefix, , goImportURL] = importMatch;
            if (!goModule.startsWith(prefix)) {
                logger_1.logger.trace({ goModule }, 'go-import header prefix not match');
                return null;
            }
            logger_1.logger.debug({ goModule, goImportURL }, 'Go lookup import url');
            // get server base url from import url
            const parsedUrl = url_1.default.parse(goImportURL);
            // split the go module from the URL: host/go/module -> go/module
            const lookupName = (0, url_2.trimTrailingSlash)(parsedUrl.pathname)
                .replace(/\.git$/, '')
                .split('/')
                .slice(-2)
                .join('/');
            return {
                datasource: github.id,
                registryUrl: `${parsedUrl.protocol}//${parsedUrl.host}`,
                lookupName,
            };
        }
        logger_1.logger.trace({ goModule }, 'No go-source or go-import header found');
    }
    return null;
}
/**
 * go.getReleases
 *
 * This datasource resolves a go module URL into its source repository
 *  and then fetch it if it is on GitHub.
 *
 * This function will:
 *  - Determine the source URL for the module
 *  - Call the respective getReleases in github/gitlab to retrieve the tags
 *  - Filter module tags according to the module path
 */
async function getReleases(config) {
    const { lookupName } = config;
    let res = null;
    logger_1.logger.trace(`goproxy.getReleases(${lookupName})`);
    res = await goproxy.getReleases(config);
    if (res) {
        return res;
    }
    logger_1.logger.trace(`go.getReleases(${lookupName})`);
    const source = await getDatasource(lookupName);
    if (!source) {
        logger_1.logger.info({ lookupName }, 'Unsupported go host - cannot look up versions');
        return null;
    }
    switch (source.datasource) {
        case github.id: {
            res = await github.getReleases(source);
            break;
        }
        case gitlab.id: {
            res = await gitlab.getReleases(source);
            break;
        }
        case bitbucket.id: {
            res = await bitbucket.getReleases(source);
            break;
        }
        /* istanbul ignore next: can never happen, makes lint happy */
        default: {
            return null;
        }
    }
    // istanbul ignore if
    if (!res) {
        return null;
    }
    /**
     * github.com/org/mod/submodule should be tagged as submodule/va.b.c
     * and that tag should be used instead of just va.b.c, although for compatibility
     * the old behaviour stays the same.
     */
    const nameParts = lookupName.replace(/\/v\d+$/, '').split('/');
    logger_1.logger.trace({ nameParts, releases: res.releases }, 'go.getReleases');
    // If it has more than 3 parts it's a submodule
    if (nameParts.length > 3) {
        const prefix = nameParts.slice(3, nameParts.length).join('/');
        logger_1.logger.trace(`go.getReleases.prefix:${prefix}`);
        // Filter the releases so that we only get the ones that are for this submodule
        // Also trim the submodule prefix from the version number
        const submodReleases = res.releases
            .filter((release) => { var _a; return (_a = release.version) === null || _a === void 0 ? void 0 : _a.startsWith(prefix); })
            .map((release) => {
            const r2 = release;
            r2.version = r2.version.replace(`${prefix}/`, '');
            return r2;
        });
        logger_1.logger.trace({ submodReleases }, 'go.getReleases');
        return {
            sourceUrl: res.sourceUrl,
            releases: submodReleases,
        };
    }
    if (res.releases) {
        res.releases = res.releases.filter((release) => { var _a; return (_a = release.version) === null || _a === void 0 ? void 0 : _a.startsWith('v'); });
    }
    return res;
}
exports.getReleases = getReleases;
/**
 * go.getDigest
 *
 * This datasource resolves a go module URL into its source repository
 *  and then fetches the digest it if it is on GitHub.
 *
 * This function will:
 *  - Determine the source URL for the module
 *  - Call the respective getDigest in github to retrieve the commit hash
 */
async function getDigest({ lookupName }, value) {
    const source = await getDatasource(lookupName);
    if (!source) {
        return null;
    }
    // ignore v0.0.0- pseudo versions that are used Go Modules - look up default branch instead
    const tag = value && !value.startsWith('v0.0.0-2') ? value : undefined;
    switch (source.datasource) {
        case github.id: {
            return github.getDigest(source, tag);
        }
        case bitbucket.id: {
            return bitbucket.getDigest(source, tag);
        }
        /* istanbul ignore next: can never happen, makes lint happy */
        default: {
            return null;
        }
    }
}
exports.getDigest = getDigest;
//# sourceMappingURL=index.js.map