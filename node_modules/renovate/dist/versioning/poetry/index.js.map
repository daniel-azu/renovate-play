{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/versioning/poetry/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseRange } from 'semver-utils';\nimport { logger } from '../../logger';\nimport { api as npm } from '../npm';\nimport { api as pep440 } from '../pep440';\nimport type { NewValueConfig, VersioningApi } from '../types';\n\nexport const id = 'poetry';\nexport const displayName = 'Poetry';\nexport const urls = ['https://python-poetry.org/docs/versions/'];\nexport const supportsRanges = true;\nexport const supportedRangeStrategies = ['bump', 'extend', 'pin', 'replace'];\n\nfunction notEmpty(s: string): boolean {\n  return s !== '';\n}\n\nfunction getVersionParts(input: string): [string, string] {\n  const versionParts = input.split('-');\n  if (versionParts.length === 1) {\n    return [input, ''];\n  }\n\n  return [versionParts[0], '-' + versionParts[1]];\n}\n\nfunction padZeroes(input: string): string {\n  if (/[~^*]/.test(input)) {\n    // ignore ranges\n    return input;\n  }\n\n  const [output, stability] = getVersionParts(input);\n\n  const sections = output.split('.');\n  while (sections.length < 3) {\n    sections.push('0');\n  }\n  return sections.join('.') + stability;\n}\n\n// This function works like cargo2npm, but it doesn't\n// add a '^', because poetry treats versions without operators as\n// exact versions.\nfunction poetry2npm(input: string): string {\n  return input\n    .split(',')\n    .map((str) => str.trim())\n    .filter(notEmpty)\n    .join(' ');\n}\n\n// NOTE: This function is copied from cargo versioning code.\n// Poetry uses commas (like in cargo) instead of spaces (like in npm)\n// for AND operation.\nfunction npm2poetry(input: string): string {\n  // Note: this doesn't remove the ^\n  const res = input\n    .split(' ')\n    .map((str) => str.trim())\n    .filter(notEmpty);\n  const operators = ['^', '~', '=', '>', '<', '<=', '>='];\n  for (let i = 0; i < res.length - 1; i += 1) {\n    if (operators.includes(res[i])) {\n      const newValue = res[i] + ' ' + res[i + 1];\n      res.splice(i, 2, newValue);\n    }\n  }\n  return res.join(', ').replace(/\\s*,?\\s*\\|\\|\\s*,?\\s*/, ' || ');\n}\n\nconst equals = (a: string, b: string): boolean => {\n  try {\n    return npm.equals(padZeroes(a), padZeroes(b));\n  } catch (err) /* istanbul ignore next */ {\n    return pep440.equals(a, b);\n  }\n};\n\nconst getMajor = (version: string): number => {\n  try {\n    return npm.getMajor(padZeroes(version));\n  } catch (err) /* istanbul ignore next */ {\n    return pep440.getMajor(version);\n  }\n};\n\nconst getMinor = (version: string): number => {\n  try {\n    return npm.getMinor(padZeroes(version));\n  } catch (err) /* istanbul ignore next */ {\n    return pep440.getMinor(version);\n  }\n};\n\nconst getPatch = (version: string): number => {\n  try {\n    return npm.getPatch(padZeroes(version));\n  } catch (err) /* istanbul ignore next */ {\n    return pep440.getPatch(version);\n  }\n};\n\nconst isGreaterThan = (a: string, b: string): boolean => {\n  try {\n    return npm.isGreaterThan(padZeroes(a), padZeroes(b));\n  } catch (err) /* istanbul ignore next */ {\n    return pep440.isGreaterThan(a, b);\n  }\n};\n\nconst isLessThanRange = (version: string, range: string): boolean =>\n  npm.isVersion(padZeroes(version)) &&\n  npm.isLessThanRange(padZeroes(version), poetry2npm(range));\n\nexport const isValid = (input: string): string | boolean =>\n  npm.isValid(poetry2npm(input));\n\nconst isStable = (version: string): boolean => npm.isStable(padZeroes(version));\n\nconst isVersion = (input: string): string | boolean =>\n  npm.isVersion(padZeroes(input));\n\nconst matches = (version: string, range: string): boolean =>\n  npm.isVersion(padZeroes(version)) &&\n  npm.matches(padZeroes(version), poetry2npm(range));\n\nconst getSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.getSatisfyingVersion(versions, poetry2npm(range));\n\nconst minSatisfyingVersion = (versions: string[], range: string): string =>\n  npm.minSatisfyingVersion(versions, poetry2npm(range));\n\nconst isSingleVersion = (constraint: string): string | boolean =>\n  (constraint.trim().startsWith('=') &&\n    isVersion(constraint.trim().substring(1).trim())) ||\n  isVersion(constraint.trim());\n\nfunction handleShort(\n  operator: string,\n  currentValue: string,\n  newVersion: string\n): string {\n  const toVersionMajor = getMajor(newVersion);\n  const toVersionMinor = getMinor(newVersion);\n  const split = currentValue.split('.');\n  if (split.length === 1) {\n    // [^,~]4\n    return `${operator}${toVersionMajor}`;\n  }\n  if (split.length === 2) {\n    // [^,~]4.1\n    return `${operator}${toVersionMajor}.${toVersionMinor}`;\n  }\n  return null;\n}\n\nfunction getNewValue({\n  currentValue,\n  rangeStrategy,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string {\n  if (rangeStrategy === 'replace') {\n    const npmCurrentValue = poetry2npm(currentValue);\n    try {\n      const massagedNewVersion = padZeroes(newVersion);\n      if (\n        npm.isVersion(massagedNewVersion) &&\n        npm.matches(massagedNewVersion, npmCurrentValue)\n      ) {\n        return currentValue;\n      }\n    } catch (err) /* istanbul ignore next */ {\n      logger.info(\n        { err },\n        'Poetry versioning: Error caught checking if newVersion satisfies currentValue'\n      );\n    }\n    const parsedRange = parseRange(npmCurrentValue);\n    const element = parsedRange[parsedRange.length - 1];\n    if (parsedRange.length === 1 && element.operator) {\n      if (element.operator === '^') {\n        const version = handleShort('^', npmCurrentValue, newVersion);\n        if (version) {\n          return npm2poetry(version);\n        }\n      }\n      if (element.operator === '~') {\n        const version = handleShort('~', npmCurrentValue, newVersion);\n        if (version) {\n          return npm2poetry(version);\n        }\n      }\n    }\n  }\n  if (!npm.isVersion(newVersion)) {\n    logger.debug(\n      'Cannot massage python version to npm - returning currentValue'\n    );\n    return currentValue;\n  }\n  try {\n    const newSemver = npm.getNewValue({\n      currentValue: poetry2npm(currentValue),\n      rangeStrategy,\n      currentVersion,\n      newVersion,\n    });\n    const newPoetry = npm2poetry(newSemver);\n    return newPoetry;\n  } catch (err) /* istanbul ignore next */ {\n    logger.debug(\n      { currentValue, rangeStrategy, currentVersion, newVersion, err },\n      'Could not generate new value using npm.getNewValue()'\n    );\n    return currentValue;\n  }\n}\n\nfunction sortVersions(a: string, b: string): number {\n  return npm.sortVersions(padZeroes(a), padZeroes(b));\n}\n\nexport const api: VersioningApi = {\n  equals,\n  getMajor,\n  getMinor,\n  getPatch,\n  getNewValue,\n  getSatisfyingVersion,\n  isCompatible: isVersion,\n  isGreaterThan,\n  isLessThanRange,\n  isSingleVersion,\n  isStable,\n  isValid,\n  isVersion,\n  matches,\n  minSatisfyingVersion,\n  sortVersions,\n};\nexport default api;\n"]}