{"version":3,"file":"range.js","sourceRoot":"","sources":["../../../lib/versioning/swift/range.ts"],"names":[],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport type { NewValueConfig } from '../types';\n\nconst fromParam = /^\\s*from\\s*:\\s*\"([^\"]+)\"\\s*$/;\nconst fromRange = /^\\s*\"([^\"]+)\"\\s*\\.\\.\\.\\s*$/;\nconst binaryRange = /^\\s*\"([^\"]+)\"\\s*(\\.\\.[.<])\\s*\"([^\"]+)\"\\s*$/;\nconst toRange = /^\\s*(\\.\\.[.<])\\s*\"([^\"]+)\"\\s*$/;\n\nfunction toSemverRange(range: string): string {\n  if (fromParam.test(range)) {\n    const [, version] = fromParam.exec(range);\n    if (semver.valid(version)) {\n      const nextMajor = `${semver.major(version) + 1}.0.0`;\n      return `>=${version} <${nextMajor}`;\n    }\n  } else if (fromRange.test(range)) {\n    const [, version] = fromRange.exec(range);\n    if (semver.valid(version)) {\n      return `>=${version}`;\n    }\n  } else if (binaryRange.test(range)) {\n    const [, currentVersion, op, newVersion] = binaryRange.exec(range);\n    if (semver.valid(currentVersion) && semver.valid(newVersion)) {\n      return op === '..<'\n        ? `>=${currentVersion} <${newVersion}`\n        : `>=${currentVersion} <=${newVersion}`;\n    }\n  } else if (toRange.test(range)) {\n    const [, op, newVersion] = toRange.exec(range);\n    if (semver.valid(newVersion)) {\n      return op === '..<' ? `<${newVersion}` : `<=${newVersion}`;\n    }\n  }\n  return null;\n}\n\nfunction getNewValue({\n  currentValue,\n  currentVersion,\n  newVersion,\n}: NewValueConfig): string {\n  if (fromParam.test(currentValue)) {\n    return currentValue.replace(/\".*?\"/, `\"${newVersion}\"`);\n  }\n  if (fromRange.test(currentValue)) {\n    const [, version] = fromRange.exec(currentValue);\n    return currentValue.replace(version, newVersion);\n  }\n  if (binaryRange.test(currentValue)) {\n    const [, , , version] = binaryRange.exec(currentValue);\n    return currentValue.replace(version, newVersion);\n  }\n  if (toRange.test(currentValue)) {\n    const [, , version] = toRange.exec(currentValue);\n    return currentValue.replace(version, newVersion);\n  }\n  return currentValue;\n}\n\nexport { toSemverRange, getNewValue };\n"]}