"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRemoteUrlWithToken = exports.getHttpUrl = void 0;
const git_url_parse_1 = __importDefault(require("git-url-parse"));
const logger_1 = require("../../logger");
const hostRules = __importStar(require("../host-rules"));
function getHttpUrl(url, token) {
    const parsedUrl = (0, git_url_parse_1.default)(url);
    parsedUrl.token = token;
    const protocol = /^https?$/.exec(parsedUrl.protocol)
        ? parsedUrl.protocol
        : 'https';
    return parsedUrl.toString(protocol);
}
exports.getHttpUrl = getHttpUrl;
function getRemoteUrlWithToken(url, hostType) {
    const hostRule = hostRules.find({ url, hostType });
    if (hostRule === null || hostRule === void 0 ? void 0 : hostRule.token) {
        logger_1.logger.debug(`Found hostRules token for url ${url}`);
        return getHttpUrl(url, encodeURIComponent(hostRule.token));
    }
    if ((hostRule === null || hostRule === void 0 ? void 0 : hostRule.username) && (hostRule === null || hostRule === void 0 ? void 0 : hostRule.password)) {
        logger_1.logger.debug(`Found hostRules username and password for url ${url}`);
        const encodedUsername = encodeURIComponent(hostRule.username);
        const encodedPassword = encodeURIComponent(hostRule.password);
        return getHttpUrl(url, `${encodedUsername}:${encodedPassword}`);
    }
    return url;
}
exports.getRemoteUrlWithToken = getRemoteUrlWithToken;
//# sourceMappingURL=url.js.map