{"version":3,"file":"host-rules.js","sourceRoot":"","sources":["../../lib/util/host-rules.ts"],"names":[],"mappings":"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","sourcesContent":["import merge from 'deepmerge';\nimport { logger } from '../logger';\nimport { HostRule } from '../types';\nimport { clone } from './clone';\nimport * as sanitize from './sanitize';\nimport { parseUrl, validateUrl } from './url';\n\nlet hostRules: HostRule[] = [];\n\nconst legacyHostFields = ['hostName', 'domainName', 'baseUrl'];\n\nexport function add(params: HostRule): void {\n  const rule = clone(params);\n  const matchedFields = legacyHostFields.filter((field) => rule[field]);\n  if (matchedFields.length) {\n    if (rule.matchHost || matchedFields.length > 1) {\n      throw new Error(\n        `hostRules cannot contain more than one host-matching field - use \"matchHost\" only.`\n      );\n    }\n    const field = matchedFields[0];\n    logger.warn({ field }, 'Legacy hostRules field needs migrating');\n    rule.matchHost = rule[field];\n    delete rule[field];\n  }\n\n  const confidentialFields = ['password', 'token'];\n  if (rule.matchHost) {\n    const parsedUrl = parseUrl(rule.matchHost);\n    rule.resolvedHost = parsedUrl?.hostname || rule.matchHost;\n    confidentialFields.forEach((field) => {\n      if (rule[field]) {\n        logger.debug(\n          `Adding ${field} authentication for ${rule.matchHost} to hostRules`\n        );\n      }\n    });\n  }\n  confidentialFields.forEach((field) => {\n    const secret = rule[field];\n    if (secret && secret.length > 3) {\n      sanitize.add(secret);\n    }\n  });\n  if (rule.username && rule.password) {\n    const secret = Buffer.from(`${rule.username}:${rule.password}`).toString(\n      'base64'\n    );\n    sanitize.add(secret);\n  }\n  hostRules.push(rule);\n}\n\nexport interface HostRuleSearch {\n  hostType?: string;\n  url?: string;\n}\n\nfunction isEmptyRule(rule: HostRule): boolean {\n  return !rule.hostType && !rule.resolvedHost;\n}\n\nfunction isHostTypeRule(rule: HostRule): boolean {\n  return rule.hostType && !rule.resolvedHost;\n}\n\nfunction isHostOnlyRule(rule: HostRule): boolean {\n  return !rule.hostType && !!rule.matchHost;\n}\n\nfunction isMultiRule(rule: HostRule): boolean {\n  return rule.hostType && !!rule.resolvedHost;\n}\n\nfunction matchesHostType(rule: HostRule, search: HostRuleSearch): boolean {\n  return rule.hostType === search.hostType;\n}\n\nfunction matchesHost(rule: HostRule, search: HostRuleSearch): boolean {\n  if (validateUrl(rule.matchHost)) {\n    return search.url.startsWith(rule.matchHost);\n  }\n  const parsedUrl = parseUrl(search.url);\n  if (!parsedUrl?.hostname) {\n    return false;\n  }\n  const { hostname } = parsedUrl;\n  const dotPrefixedMatchHost = rule.matchHost.startsWith('.')\n    ? rule.matchHost\n    : `.${rule.matchHost}`;\n  return hostname === rule.matchHost || hostname.endsWith(dotPrefixedMatchHost);\n}\n\nexport function find(search: HostRuleSearch): HostRule {\n  if (!(search.hostType || search.url)) {\n    logger.warn({ search }, 'Invalid hostRules search');\n    return {};\n  }\n  let res = {} as any as HostRule;\n  // First, apply empty rule matches\n  hostRules\n    .filter((rule) => isEmptyRule(rule))\n    .forEach((rule) => {\n      res = merge(res, rule);\n    });\n  // Next, find hostType-only matches\n  hostRules\n    .filter((rule) => isHostTypeRule(rule) && matchesHostType(rule, search))\n    .forEach((rule) => {\n      res = merge(res, rule);\n    });\n  hostRules\n    .filter((rule) => isHostOnlyRule(rule) && matchesHost(rule, search))\n    .forEach((rule) => {\n      res = merge(res, rule);\n    });\n  // Finally, find combination matches\n  hostRules\n    .filter(\n      (rule) =>\n        isMultiRule(rule) &&\n        matchesHostType(rule, search) &&\n        matchesHost(rule, search)\n    )\n    .forEach((rule) => {\n      res = merge(res, rule);\n    });\n  delete res.hostType;\n  delete res.resolvedHost;\n  delete res.matchHost;\n  return res;\n}\n\nexport function hosts({ hostType }: { hostType: string }): string[] {\n  return hostRules\n    .filter((rule) => rule.hostType === hostType)\n    .map((rule) => rule.resolvedHost)\n    .filter(Boolean);\n}\n\nexport function findAll({ hostType }: { hostType: string }): HostRule[] {\n  return hostRules.filter((rule) => rule.hostType === hostType);\n}\n\nexport function clear(): void {\n  logger.debug('Clearing hostRules');\n  hostRules = [];\n  sanitize.clear();\n}\n"]}