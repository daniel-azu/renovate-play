declare type Method<T> = (this: T, ...args: any[]) => Promise<any>;
declare type Decorator<T> = <U extends T>(target: U, key: keyof U, descriptor: TypedPropertyDescriptor<Method<T>>) => TypedPropertyDescriptor<Method<T>>;
declare type HashFunction<T extends any[] = any[]> = (...args: T) => string;
/**
 * The cache decorator parameters.
 */
interface CacheParameters {
    /**
     * The cache namespace
     * Either a string or a hash function that generates a string
     */
    namespace: string | HashFunction;
    /**
     * The cache key
     * Either a string or a hash function that generates a string
     */
    key: string | HashFunction;
    /**
     * The TTL (or expiry) of the key in minutes
     */
    ttlMinutes?: number;
}
/**
 * caches the result of a decorated method.
 */
export declare function cache<T>({ namespace, key, ttlMinutes, }: CacheParameters): Decorator<T>;
export {};
