"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cache = void 0;
const is_1 = __importDefault(require("@sindresorhus/is"));
const packageCache = __importStar(require("."));
/**
 * Applies decorating function to intercept decorated method calls.
 * @param fn - The decorating function.
 */
function decorate(fn) {
    const result = (target, key, descriptor) => {
        var _a;
        if (descriptor === void 0) { descriptor = (_a = Object.getOwnPropertyDescriptor(target, key)) !== null && _a !== void 0 ? _a : {
            enumerable: true,
            configurable: true,
            writable: true,
        }; }
        const { value } = descriptor;
        return Object.assign(descriptor, {
            value(...args) {
                return fn({
                    args,
                    instance: this,
                    callback: () => value === null || value === void 0 ? void 0 : value.apply(this, args),
                });
            },
        });
    };
    return result;
}
/**
 * caches the result of a decorated method.
 */
function cache({ namespace, key, ttlMinutes = 30, }) {
    return decorate(async ({ args, instance, callback }) => {
        let finalNamespace;
        if (is_1.default.string(namespace)) {
            finalNamespace = namespace;
        }
        else if (is_1.default.function_(namespace)) {
            finalNamespace = namespace.apply(instance, args);
        }
        let finalKey;
        if (is_1.default.string(key)) {
            finalKey = key;
        }
        else if (is_1.default.function_(key)) {
            finalKey = key.apply(instance, args);
        }
        const cachedResult = await packageCache.get(finalNamespace, finalKey);
        if (cachedResult !== undefined) {
            return cachedResult;
        }
        const result = await callback();
        // only cache if we got a valid result
        if (result !== undefined) {
            await packageCache.set(finalNamespace, finalKey, result, ttlMinutes);
        }
        return result;
    });
}
exports.cache = cache;
//# sourceMappingURL=decorator.js.map