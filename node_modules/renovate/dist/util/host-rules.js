"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clear = exports.findAll = exports.hosts = exports.find = exports.add = void 0;
const deepmerge_1 = __importDefault(require("deepmerge"));
const logger_1 = require("../logger");
const clone_1 = require("./clone");
const sanitize = __importStar(require("./sanitize"));
const url_1 = require("./url");
let hostRules = [];
const legacyHostFields = ['hostName', 'domainName', 'baseUrl'];
function add(params) {
    const rule = (0, clone_1.clone)(params);
    const matchedFields = legacyHostFields.filter((field) => rule[field]);
    if (matchedFields.length) {
        if (rule.matchHost || matchedFields.length > 1) {
            throw new Error(`hostRules cannot contain more than one host-matching field - use "matchHost" only.`);
        }
        const field = matchedFields[0];
        logger_1.logger.warn({ field }, 'Legacy hostRules field needs migrating');
        rule.matchHost = rule[field];
        delete rule[field];
    }
    const confidentialFields = ['password', 'token'];
    if (rule.matchHost) {
        const parsedUrl = (0, url_1.parseUrl)(rule.matchHost);
        rule.resolvedHost = (parsedUrl === null || parsedUrl === void 0 ? void 0 : parsedUrl.hostname) || rule.matchHost;
        confidentialFields.forEach((field) => {
            if (rule[field]) {
                logger_1.logger.debug(`Adding ${field} authentication for ${rule.matchHost} to hostRules`);
            }
        });
    }
    confidentialFields.forEach((field) => {
        const secret = rule[field];
        if (secret && secret.length > 3) {
            sanitize.add(secret);
        }
    });
    if (rule.username && rule.password) {
        const secret = Buffer.from(`${rule.username}:${rule.password}`).toString('base64');
        sanitize.add(secret);
    }
    hostRules.push(rule);
}
exports.add = add;
function isEmptyRule(rule) {
    return !rule.hostType && !rule.resolvedHost;
}
function isHostTypeRule(rule) {
    return rule.hostType && !rule.resolvedHost;
}
function isHostOnlyRule(rule) {
    return !rule.hostType && !!rule.matchHost;
}
function isMultiRule(rule) {
    return rule.hostType && !!rule.resolvedHost;
}
function matchesHostType(rule, search) {
    return rule.hostType === search.hostType;
}
function matchesHost(rule, search) {
    if ((0, url_1.validateUrl)(rule.matchHost)) {
        return search.url.startsWith(rule.matchHost);
    }
    const parsedUrl = (0, url_1.parseUrl)(search.url);
    if (!(parsedUrl === null || parsedUrl === void 0 ? void 0 : parsedUrl.hostname)) {
        return false;
    }
    const { hostname } = parsedUrl;
    const dotPrefixedMatchHost = rule.matchHost.startsWith('.')
        ? rule.matchHost
        : `.${rule.matchHost}`;
    return hostname === rule.matchHost || hostname.endsWith(dotPrefixedMatchHost);
}
function find(search) {
    if (!(search.hostType || search.url)) {
        logger_1.logger.warn({ search }, 'Invalid hostRules search');
        return {};
    }
    let res = {};
    // First, apply empty rule matches
    hostRules
        .filter((rule) => isEmptyRule(rule))
        .forEach((rule) => {
        res = (0, deepmerge_1.default)(res, rule);
    });
    // Next, find hostType-only matches
    hostRules
        .filter((rule) => isHostTypeRule(rule) && matchesHostType(rule, search))
        .forEach((rule) => {
        res = (0, deepmerge_1.default)(res, rule);
    });
    hostRules
        .filter((rule) => isHostOnlyRule(rule) && matchesHost(rule, search))
        .forEach((rule) => {
        res = (0, deepmerge_1.default)(res, rule);
    });
    // Finally, find combination matches
    hostRules
        .filter((rule) => isMultiRule(rule) &&
        matchesHostType(rule, search) &&
        matchesHost(rule, search))
        .forEach((rule) => {
        res = (0, deepmerge_1.default)(res, rule);
    });
    delete res.hostType;
    delete res.resolvedHost;
    delete res.matchHost;
    return res;
}
exports.find = find;
function hosts({ hostType }) {
    return hostRules
        .filter((rule) => rule.hostType === hostType)
        .map((rule) => rule.resolvedHost)
        .filter(Boolean);
}
exports.hosts = hosts;
function findAll({ hostType }) {
    return hostRules.filter((rule) => rule.hostType === hostType);
}
exports.findAll = findAll;
function clear() {
    logger_1.logger.debug('Clearing hostRules');
    hostRules = [];
    sanitize.clear();
}
exports.clear = clear;
//# sourceMappingURL=host-rules.js.map