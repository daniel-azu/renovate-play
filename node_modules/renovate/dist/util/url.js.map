{"version":3,"file":"url.js","sourceRoot":"","sources":["../../lib/util/url.ts"],"names":[],"mappings":";;;;;;AAAA,wDAA+B;AAE/B,SAAgB,YAAY,CAAC,GAAG,KAAe;IAC7C,OAAO,IAAA,kBAAO,EAAC,GAAG,KAAK,CAAC,CAAC;AAC3B,CAAC;AAFD,oCAEC;AAED,SAAgB,gBAAgB,CAAC,GAAW,EAAE,MAAc;IAC1D,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5B,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAChD,IAAI,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;QAC/B,OAAO,GAAG,CAAC;KACZ;IACD,OAAO,MAAM,CAAC,MAAM,GAAG,MAAM,GAAG,QAAQ,CAAC;AAC3C,CAAC;AAPD,4CAOC;AAED,SAAgB,mBAAmB,CAAC,GAAW;IAC7C,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAClC,CAAC;AAFD,kDAEC;AAED,SAAgB,iBAAiB,CAAC,GAAW;IAC3C,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACjC,CAAC;AAFD,8CAEC;AAED,SAAgB,cAAc,CAAC,OAAe,EAAE,KAAmB;IACjE,MAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;IAErC,IAAI,IAAI,CAAC;IACT,IAAI,QAAQ,CAAC;IACb,IAAI;QACF,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;KAC7C;IAAC,OAAO,CAAC,EAAE;QACV,QAAQ,GAAG,WAAW,CAAC;KACxB;IAED,OAAO,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAA,kBAAO,EAAC,OAAO,EAAE,QAAQ,IAAI,EAAE,CAAC,CAAC;AAC/D,CAAC;AAZD,wCAYC;AAED,SAAgB,cAAc,CAAC,MAA2B;IACxD,MAAM,GAAG,GAAG,IAAI,eAAe,EAAE,CAAC;IAClC,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QAC3C,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACpB,KAAK,MAAM,IAAI,IAAI,CAAC,EAAE;gBACpB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;aAChC;SACF;aAAM;YACL,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC7B;KACF;IACD,MAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;IAC3B,OAAO,GAAG,CAAC;AACb,CAAC;AAbD,wCAaC;AAED,SAAgB,WAAW,CAAC,GAAY,EAAE,QAAQ,GAAG,IAAI;IACvD,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,KAAK,CAAC;KACd;IACD,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;KAC9D;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAVD,kCAUC;AAED,SAAgB,QAAQ,CAAC,GAAW;IAClC,IAAI;QACF,OAAO,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;KACrB;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAND,4BAMC","sourcesContent":["import urlJoin from 'url-join';\n\nexport function joinUrlParts(...parts: string[]): string {\n  return urlJoin(...parts);\n}\n\nexport function ensurePathPrefix(url: string, prefix: string): string {\n  const parsed = new URL(url);\n  const fullPath = url.replace(parsed.origin, '');\n  if (fullPath.startsWith(prefix)) {\n    return url;\n  }\n  return parsed.origin + prefix + fullPath;\n}\n\nexport function ensureTrailingSlash(url: string): string {\n  return url.replace(/\\/?$/, '/');\n}\n\nexport function trimTrailingSlash(url: string): string {\n  return url.replace(/\\/+$/, '');\n}\n\nexport function resolveBaseUrl(baseUrl: string, input: string | URL): string {\n  const inputString = input.toString();\n\n  let host;\n  let pathname;\n  try {\n    ({ host, pathname } = new URL(inputString));\n  } catch (e) {\n    pathname = inputString;\n  }\n\n  return host ? inputString : urlJoin(baseUrl, pathname || '');\n}\n\nexport function getQueryString(params: Record<string, any>): string {\n  const usp = new URLSearchParams();\n  for (const [k, v] of Object.entries(params)) {\n    if (Array.isArray(v)) {\n      for (const item of v) {\n        usp.append(k, item.toString());\n      }\n    } else {\n      usp.append(k, v.toString());\n    }\n  }\n  const res = usp.toString();\n  return res;\n}\n\nexport function validateUrl(url?: string, httpOnly = true): boolean {\n  if (!url) {\n    return false;\n  }\n  try {\n    const { protocol } = new URL(url);\n    return httpOnly ? !!protocol.startsWith('http') : !!protocol;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport function parseUrl(url: string): URL | null {\n  try {\n    return new URL(url);\n  } catch (err) {\n    return null;\n  }\n}\n"]}