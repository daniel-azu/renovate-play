"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.linkify = exports.sanitizeMarkdown = void 0;
const remark_1 = __importDefault(require("remark"));
const remark_github_1 = __importDefault(require("remark-github"));
// Generic replacements/link-breakers
function sanitizeMarkdown(markdown) {
    let res = markdown;
    // Put a zero width space after every # followed by a digit
    res = res.replace(/#(\d)/gi, '#&#8203;$1');
    // Put a zero width space after every @ symbol to prevent unintended hyperlinking
    res = res.replace(/@/g, '@&#8203;');
    res = res.replace(/(`\[?@)&#8203;/g, '$1');
    res = res.replace(/([a-z]@)&#8203;/gi, '$1');
    res = res.replace(/\/compare\/@&#8203;/g, '/compare/@');
    res = res.replace(/(\(https:\/\/[^)]*?)\.\.\.@&#8203;/g, '$1...@');
    res = res.replace(/([\s(])#(\d+)([)\s]?)/g, '$1#&#8203;$2$3');
    // convert escaped backticks back to `
    const backTickRe = /&#x60;([^/]*?)&#x60;/g;
    res = res.replace(backTickRe, '`$1`');
    res = res.replace(/`#&#8203;(\d+)`/g, '`#$1`');
    return res;
}
exports.sanitizeMarkdown = sanitizeMarkdown;
/**
 *
 * @param content content to process
 * @param options github options
 * @returns linkified content
 */
async function linkify(content, options) {
    // https://github.com/syntax-tree/mdast-util-to-markdown#optionsbullet
    const output = await (0, remark_1.default)()
        .use({ settings: { bullet: '-' } })
        .use(remark_github_1.default, { mentionStrong: false, ...options })
        .process(content);
    return output.toString();
}
exports.linkify = linkify;
//# sourceMappingURL=markdown.js.map