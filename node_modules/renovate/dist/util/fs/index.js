"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWriteStream = exports.readLocalDirectory = exports.findLocalSiblingOrParent = exports.localPathExists = exports.privateCacheDir = exports.ensureCacheDir = exports.ensureLocalDir = exports.ensureDir = exports.renameLocalFile = exports.deleteLocalFile = exports.writeLocalFile = exports.readLocalFile = exports.getSiblingFileName = exports.getSubDirectory = exports.pipeline = void 0;
const stream_1 = __importDefault(require("stream"));
const util_1 = __importDefault(require("util"));
const is_1 = __importDefault(require("@sindresorhus/is"));
const fs = __importStar(require("fs-extra"));
const upath_1 = require("upath");
const global_1 = require("../../config/global");
const logger_1 = require("../../logger");
__exportStar(require("./proxies"), exports);
exports.pipeline = util_1.default.promisify(stream_1.default.pipeline);
function getSubDirectory(fileName) {
    return (0, upath_1.parse)(fileName).dir;
}
exports.getSubDirectory = getSubDirectory;
function getSiblingFileName(existingFileNameWithPath, otherFileName) {
    const subDirectory = getSubDirectory(existingFileNameWithPath);
    return (0, upath_1.join)(subDirectory, otherFileName);
}
exports.getSiblingFileName = getSiblingFileName;
async function readLocalFile(fileName, encoding) {
    const { localDir } = (0, global_1.getGlobalConfig)();
    const localFileName = (0, upath_1.join)(localDir, fileName);
    try {
        const fileContent = await fs.readFile(localFileName, encoding);
        return fileContent;
    }
    catch (err) {
        logger_1.logger.trace({ err }, 'Error reading local file');
        return null;
    }
}
exports.readLocalFile = readLocalFile;
async function writeLocalFile(fileName, fileContent) {
    const { localDir } = (0, global_1.getGlobalConfig)();
    const localFileName = (0, upath_1.join)(localDir, fileName);
    await fs.outputFile(localFileName, fileContent);
}
exports.writeLocalFile = writeLocalFile;
async function deleteLocalFile(fileName) {
    const { localDir } = (0, global_1.getGlobalConfig)();
    if (localDir) {
        const localFileName = (0, upath_1.join)(localDir, fileName);
        await fs.remove(localFileName);
    }
}
exports.deleteLocalFile = deleteLocalFile;
// istanbul ignore next
async function renameLocalFile(fromFile, toFile) {
    const { localDir } = (0, global_1.getGlobalConfig)();
    await fs.move((0, upath_1.join)(localDir, fromFile), (0, upath_1.join)(localDir, toFile));
}
exports.renameLocalFile = renameLocalFile;
// istanbul ignore next
async function ensureDir(dirName) {
    if (is_1.default.nonEmptyString(dirName)) {
        await fs.ensureDir(dirName);
    }
}
exports.ensureDir = ensureDir;
// istanbul ignore next
async function ensureLocalDir(dirName) {
    const { localDir } = (0, global_1.getGlobalConfig)();
    const localDirName = (0, upath_1.join)(localDir, dirName);
    await fs.ensureDir(localDirName);
}
exports.ensureLocalDir = ensureLocalDir;
async function ensureCacheDir(name) {
    const cacheDirName = (0, upath_1.join)((0, global_1.getGlobalConfig)().cacheDir, `others/${name}`);
    await fs.ensureDir(cacheDirName);
    return cacheDirName;
}
exports.ensureCacheDir = ensureCacheDir;
/**
 * Return the path of the private cache directory. This directory is wiped
 * between repositories, so they can be used to store private registries' index
 * without risk of that information leaking to other repositories/users.
 */
function privateCacheDir() {
    const { cacheDir } = (0, global_1.getGlobalConfig)();
    return (0, upath_1.join)(cacheDir, '__renovate-private-cache');
}
exports.privateCacheDir = privateCacheDir;
function localPathExists(pathName) {
    const { localDir } = (0, global_1.getGlobalConfig)();
    // Works for both files as well as directories
    return fs
        .stat((0, upath_1.join)(localDir, pathName))
        .then((s) => !!s)
        .catch(() => false);
}
exports.localPathExists = localPathExists;
/**
 * Tries to find `otherFileName` in the directory where
 * `existingFileNameWithPath` is, then in its parent directory, then in the
 * grandparent, until we reach the top-level directory. All paths
 * must be relative to `localDir`.
 */
async function findLocalSiblingOrParent(existingFileNameWithPath, otherFileName) {
    if ((0, upath_1.isAbsolute)(existingFileNameWithPath)) {
        return null;
    }
    if ((0, upath_1.isAbsolute)(otherFileName)) {
        return null;
    }
    let current = existingFileNameWithPath;
    while (current !== '') {
        current = getSubDirectory(current);
        const candidate = (0, upath_1.join)(current, otherFileName);
        if (await localPathExists(candidate)) {
            return candidate;
        }
    }
    return null;
}
exports.findLocalSiblingOrParent = findLocalSiblingOrParent;
/**
 * Get files by name from directory
 */
async function readLocalDirectory(path) {
    const { localDir } = (0, global_1.getGlobalConfig)();
    const localPath = (0, upath_1.join)(localDir, path);
    const fileList = await fs.readdir(localPath);
    return fileList;
}
exports.readLocalDirectory = readLocalDirectory;
function createWriteStream(path) {
    return fs.createWriteStream(path);
}
exports.createWriteStream = createWriteStream;
//# sourceMappingURL=index.js.map