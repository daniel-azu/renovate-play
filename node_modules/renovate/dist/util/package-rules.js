"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyPackageRules = void 0;
const is_1 = __importDefault(require("@sindresorhus/is"));
const minimatch_1 = __importDefault(require("minimatch"));
const slugify_1 = __importDefault(require("slugify"));
const config_1 = require("../config");
const logger_1 = require("../logger");
const allVersioning = __importStar(require("../versioning"));
const regex_1 = require("./regex");
function matchesRule(inputConfig, packageRule) {
    const { versioning, packageFile, lockFiles, depType, depTypes, depName, currentValue, currentVersion, lockedVersion, updateType, isBump, sourceUrl, language, baseBranch, manager, datasource, } = inputConfig;
    // Setting empty arrays simplifies our logic later
    const matchFiles = packageRule.matchFiles || [];
    const matchPaths = packageRule.matchPaths || [];
    const matchLanguages = packageRule.matchLanguages || [];
    const matchBaseBranches = packageRule.matchBaseBranches || [];
    const matchManagers = packageRule.matchManagers || [];
    const matchDatasources = packageRule.matchDatasources || [];
    const matchDepTypes = packageRule.matchDepTypes || [];
    const matchPackageNames = packageRule.matchPackageNames || [];
    let matchPackagePatterns = packageRule.matchPackagePatterns || [];
    const matchPackagePrefixes = packageRule.matchPackagePrefixes || [];
    const excludePackageNames = packageRule.excludePackageNames || [];
    const excludePackagePatterns = packageRule.excludePackagePatterns || [];
    const excludePackagePrefixes = packageRule.excludePackagePrefixes || [];
    const matchSourceUrlPrefixes = packageRule.matchSourceUrlPrefixes || [];
    const matchCurrentVersion = packageRule.matchCurrentVersion || null;
    const matchUpdateTypes = packageRule.matchUpdateTypes || [];
    let positiveMatch = false;
    // Massage a positive patterns patch if an exclude one is present
    if ((excludePackageNames.length ||
        excludePackagePatterns.length ||
        excludePackagePrefixes.length) &&
        !(matchPackageNames.length ||
            matchPackagePatterns.length ||
            matchPackagePrefixes.length)) {
        matchPackagePatterns = ['.*'];
    }
    if (matchFiles.length) {
        const isMatch = matchFiles.some((fileName) => packageFile === fileName ||
            (is_1.default.array(lockFiles) && (lockFiles === null || lockFiles === void 0 ? void 0 : lockFiles.includes(fileName))));
        if (!isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (matchPaths.length) {
        const isMatch = matchPaths.some((rulePath) => packageFile.includes(rulePath) ||
            (0, minimatch_1.default)(packageFile, rulePath, { dot: true }));
        if (!isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (matchDepTypes.length) {
        const isMatch = matchDepTypes.includes(depType) ||
            (depTypes === null || depTypes === void 0 ? void 0 : depTypes.some((dt) => matchDepTypes.includes(dt)));
        if (!isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (matchLanguages.length) {
        const isMatch = matchLanguages.includes(language);
        if (!isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (matchBaseBranches.length) {
        const isMatch = matchBaseBranches.includes(baseBranch);
        if (!isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (matchManagers.length) {
        const isMatch = matchManagers.includes(manager);
        if (!isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (matchDatasources.length) {
        const isMatch = matchDatasources.includes(datasource);
        if (!isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (matchUpdateTypes.length) {
        const isMatch = matchUpdateTypes.includes(updateType) ||
            (isBump && matchUpdateTypes.includes('bump'));
        if (!isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (depName &&
        (matchPackageNames.length ||
            matchPackagePatterns.length ||
            matchPackagePrefixes.length)) {
        let isMatch = matchPackageNames.includes(depName);
        // name match is "or" so we check patterns if we didn't match names
        if (!isMatch) {
            for (const packagePattern of matchPackagePatterns) {
                const packageRegex = (0, regex_1.regEx)(packagePattern === '^*$' || packagePattern === '*'
                    ? '.*'
                    : packagePattern);
                if (packageRegex.test(depName)) {
                    logger_1.logger.trace(`${depName} matches against ${String(packageRegex)}`);
                    isMatch = true;
                }
            }
        }
        // prefix match is also "or"
        if (!isMatch && matchPackagePrefixes.length) {
            isMatch = matchPackagePrefixes.some((prefix) => depName.startsWith(prefix));
        }
        if (!isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (excludePackageNames.length) {
        const isMatch = excludePackageNames.includes(depName);
        if (isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (depName && excludePackagePatterns.length) {
        let isMatch = false;
        for (const pattern of excludePackagePatterns) {
            const packageRegex = (0, regex_1.regEx)(pattern === '^*$' || pattern === '*' ? '.*' : pattern);
            if (packageRegex.test(depName)) {
                logger_1.logger.trace(`${depName} matches against ${String(packageRegex)}`);
                isMatch = true;
            }
        }
        if (isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (depName && excludePackagePrefixes.length) {
        const isMatch = excludePackagePrefixes.some((prefix) => depName.startsWith(prefix));
        if (isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (matchSourceUrlPrefixes.length) {
        const isMatch = matchSourceUrlPrefixes.some((prefix) => sourceUrl === null || sourceUrl === void 0 ? void 0 : sourceUrl.startsWith(prefix));
        if (!isMatch) {
            return false;
        }
        positiveMatch = true;
    }
    if (matchCurrentVersion) {
        const version = allVersioning.get(versioning);
        const matchCurrentVersionStr = matchCurrentVersion.toString();
        if ((0, regex_1.isConfigRegex)(matchCurrentVersionStr)) {
            const matches = (0, regex_1.configRegexPredicate)(matchCurrentVersionStr);
            if (!matches(currentValue)) {
                return false;
            }
            positiveMatch = true;
        }
        else if (version.isVersion(matchCurrentVersionStr)) {
            let isMatch = false;
            try {
                isMatch = version.matches(matchCurrentVersionStr, currentValue);
            }
            catch (err) {
                // Do nothing
            }
            if (!isMatch) {
                return false;
            }
            positiveMatch = true;
        }
        else {
            const compareVersion = currentValue && version.isVersion(currentValue)
                ? currentValue // it's a version so we can match against it
                : lockedVersion || currentVersion; // need to match against this currentVersion, if available
            if (compareVersion) {
                // istanbul ignore next
                if (version.isVersion(compareVersion)) {
                    const isMatch = version.matches(compareVersion, matchCurrentVersion);
                    // istanbul ignore if
                    if (!isMatch) {
                        return false;
                    }
                    positiveMatch = true;
                }
                else {
                    return false;
                }
            }
            else {
                logger_1.logger.debug({ matchCurrentVersionStr, currentValue }, 'Could not find a version to compare');
                return false;
            }
        }
    }
    return positiveMatch;
}
function applyPackageRules(inputConfig) {
    let config = { ...inputConfig };
    const packageRules = config.packageRules || [];
    logger_1.logger.trace({ dependency: config.depName, packageRules }, `Checking against ${packageRules.length} packageRules`);
    packageRules.forEach((packageRule) => {
        // This rule is considered matched if there was at least one positive match and no negative matches
        if (matchesRule(config, packageRule)) {
            // Package rule config overrides any existing config
            const toApply = { ...packageRule };
            if (config.groupSlug && packageRule.groupName && !packageRule.groupSlug) {
                // Need to apply groupSlug otherwise the existing one will take precedence
                toApply.groupSlug = (0, slugify_1.default)(packageRule.groupName, {
                    lower: true,
                });
            }
            config = (0, config_1.mergeChildConfig)(config, toApply);
            delete config.matchPackageNames;
            delete config.matchPackagePatterns;
            delete config.matchPackagePrefixes;
            delete config.excludePackageNames;
            delete config.excludePackagePatterns;
            delete config.excludePackagePrefixes;
            delete config.matchDepTypes;
            delete config.matchCurrentVersion;
        }
    });
    return config;
}
exports.applyPackageRules = applyPackageRules;
//# sourceMappingURL=package-rules.js.map